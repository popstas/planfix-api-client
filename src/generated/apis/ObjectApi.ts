/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseError,
  GetObjectById200Response,
  GetObjectList200Response,
  GetObjectListRequest,
  GetTaskStatusList200Response,
} from '../models/index';
import {
    ApiResponseErrorFromJSON,
    ApiResponseErrorToJSON,
    GetObjectById200ResponseFromJSON,
    GetObjectById200ResponseToJSON,
    GetObjectList200ResponseFromJSON,
    GetObjectList200ResponseToJSON,
    GetObjectListRequestFromJSON,
    GetObjectListRequestToJSON,
    GetTaskStatusList200ResponseFromJSON,
    GetTaskStatusList200ResponseToJSON,
} from '../models/index';

export interface GetObjectByIdRequest {
    id: number;
}

export interface GetObjectListOperationRequest {
    getObjectListRequest?: GetObjectListRequest;
}

export interface GetObjectTaskStatusListRequest {
    id: number;
    fields?: string;
}

/**
 * 
 */
export class ObjectApi extends runtime.BaseAPI {

    /**
     * This method lets you get a object by number
     * Get object by number
     */
    async getObjectByIdRaw(requestParameters: GetObjectByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetObjectById200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getObjectById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/object/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetObjectById200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a object by number
     * Get object by number
     */
    async getObjectById(requestParameters: GetObjectByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetObjectById200Response> {
        const response = await this.getObjectByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of objects
     * Get list of objects
     */
    async getObjectListRaw(requestParameters: GetObjectListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetObjectList200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/object/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetObjectListRequestToJSON(requestParameters['getObjectListRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetObjectList200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of objects
     * Get list of objects
     */
    async getObjectList(requestParameters: GetObjectListOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetObjectList200Response> {
        const response = await this.getObjectListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of task statuses for object
     * Get list of task statuses for object
     */
    async getObjectTaskStatusListRaw(requestParameters: GetObjectTaskStatusListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTaskStatusList200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getObjectTaskStatusList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/object/{id}/statuses`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTaskStatusList200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of task statuses for object
     * Get list of task statuses for object
     */
    async getObjectTaskStatusList(requestParameters: GetObjectTaskStatusListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTaskStatusList200Response> {
        const response = await this.getObjectTaskStatusListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
