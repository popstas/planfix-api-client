/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseError,
  GetContactListGroups200Response,
  GetUserId200Response,
  GetUserList200Response,
  GetUserListRequest,
  GetUserPositions200Response,
  PostContact201Response,
  PostContactById200Response,
  UserRequest,
} from '../models/index';
import {
    ApiResponseErrorFromJSON,
    ApiResponseErrorToJSON,
    GetContactListGroups200ResponseFromJSON,
    GetContactListGroups200ResponseToJSON,
    GetUserId200ResponseFromJSON,
    GetUserId200ResponseToJSON,
    GetUserList200ResponseFromJSON,
    GetUserList200ResponseToJSON,
    GetUserListRequestFromJSON,
    GetUserListRequestToJSON,
    GetUserPositions200ResponseFromJSON,
    GetUserPositions200ResponseToJSON,
    PostContact201ResponseFromJSON,
    PostContact201ResponseToJSON,
    PostContactById200ResponseFromJSON,
    PostContactById200ResponseToJSON,
    UserRequestFromJSON,
    UserRequestToJSON,
} from '../models/index';

export interface GetUserGroupsRequest {
    fields?: string;
}

export interface GetUserIdRequest {
    id: string;
    fields?: string;
    sourceId?: string;
}

export interface GetUserListOperationRequest {
    getUserListRequest?: GetUserListRequest;
}

export interface GetUserPositionsRequest {
    fields?: string;
}

export interface PostUserRequest {
    userRequest?: UserRequest;
}

export interface PostUserIdRequest {
    id: string;
    silent?: boolean;
    userRequest?: UserRequest;
}

/**
 * 
 */
export class EmployeeApi extends runtime.BaseAPI {

    /**
     * This method lets you get a list of employee groups
     * Get list of employee groups
     */
    async getUserGroupsRaw(requestParameters: GetUserGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetContactListGroups200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContactListGroups200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of employee groups
     * Get list of employee groups
     */
    async getUserGroups(requestParameters: GetUserGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetContactListGroups200Response> {
        const response = await this.getUserGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get an employee by number
     * Get employee by number
     */
    async getUserIdRaw(requestParameters: GetUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserId200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['sourceId'] != null) {
            queryParameters['sourceId'] = requestParameters['sourceId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserId200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get an employee by number
     * Get employee by number
     */
    async getUserId(requestParameters: GetUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserId200Response> {
        const response = await this.getUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of employees
     * Get list of employees
     */
    async getUserListRaw(requestParameters: GetUserListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserList200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUserListRequestToJSON(requestParameters['getUserListRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserList200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of employees
     * Get list of employees
     */
    async getUserList(requestParameters: GetUserListOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserList200Response> {
        const response = await this.getUserListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of employee positions
     * Get list of employee positions
     */
    async getUserPositionsRaw(requestParameters: GetUserPositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserPositions200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/positions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserPositions200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of employee positions
     * Get list of employee positions
     */
    async getUserPositions(requestParameters: GetUserPositionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserPositions200Response> {
        const response = await this.getUserPositionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you create a new employee
     * Create employee
     */
    async postUserRaw(requestParameters: PostUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostContact201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRequestToJSON(requestParameters['userRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostContact201ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you create a new employee
     * Create employee
     */
    async postUser(requestParameters: PostUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostContact201Response> {
        const response = await this.postUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you update an employee by number
     * Update employee by number
     */
    async postUserIdRaw(requestParameters: PostUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostContactById200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postUserId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['silent'] != null) {
            queryParameters['silent'] = requestParameters['silent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRequestToJSON(requestParameters['userRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostContactById200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you update an employee by number
     * Update employee by number
     */
    async postUserId(requestParameters: PostUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostContactById200Response> {
        const response = await this.postUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
