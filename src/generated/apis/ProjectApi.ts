/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseError,
  GetContactFiles200Response,
  GetContactListGroups200Response,
  GetProjectById200Response,
  GetProjectList200Response,
  GetProjectListRequest,
  GetProjectListTemplates200Response,
  PostContact201Response,
  PostContactById200Response,
  ProjectRequest,
  ProjectUpdateRequest,
} from '../models/index';
import {
    ApiResponseErrorFromJSON,
    ApiResponseErrorToJSON,
    GetContactFiles200ResponseFromJSON,
    GetContactFiles200ResponseToJSON,
    GetContactListGroups200ResponseFromJSON,
    GetContactListGroups200ResponseToJSON,
    GetProjectById200ResponseFromJSON,
    GetProjectById200ResponseToJSON,
    GetProjectList200ResponseFromJSON,
    GetProjectList200ResponseToJSON,
    GetProjectListRequestFromJSON,
    GetProjectListRequestToJSON,
    GetProjectListTemplates200ResponseFromJSON,
    GetProjectListTemplates200ResponseToJSON,
    PostContact201ResponseFromJSON,
    PostContact201ResponseToJSON,
    PostContactById200ResponseFromJSON,
    PostContactById200ResponseToJSON,
    ProjectRequestFromJSON,
    ProjectRequestToJSON,
    ProjectUpdateRequestFromJSON,
    ProjectUpdateRequestToJSON,
} from '../models/index';

export interface GetProjectByIdRequest {
    id: number;
    fields?: string;
    sourceId?: string;
}

export interface GetProjectFilesRequest {
    id: string;
    pageSize?: number;
    offset?: number;
}

export interface GetProjectGroupsRequest {
    fields?: string;
}

export interface GetProjectListOperationRequest {
    getProjectListRequest?: GetProjectListRequest;
}

export interface GetProjectListTemplatesRequest {
    offset?: number;
    pageSize?: number;
    sourceId?: string;
    fields?: string;
}

export interface PostProjectRequest {
    projectRequest?: ProjectRequest;
}

export interface PostProjectByIdRequest {
    id: number;
    silent?: boolean;
    projectUpdateRequest?: ProjectUpdateRequest;
}

/**
 * 
 */
export class ProjectApi extends runtime.BaseAPI {

    /**
     * This method lets you get a project by number
     * Get project by number
     */
    async getProjectByIdRaw(requestParameters: GetProjectByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProjectById200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getProjectById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['sourceId'] != null) {
            queryParameters['sourceId'] = requestParameters['sourceId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProjectById200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a project by number
     * Get project by number
     */
    async getProjectById(requestParameters: GetProjectByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProjectById200Response> {
        const response = await this.getProjectByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get project files
     * Get project files
     */
    async getProjectFilesRaw(requestParameters: GetProjectFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetContactFiles200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getProjectFiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project/{id}/files`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContactFiles200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get project files
     * Get project files
     */
    async getProjectFiles(requestParameters: GetProjectFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetContactFiles200Response> {
        const response = await this.getProjectFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of project groups
     * Get list of project groups
     */
    async getProjectGroupsRaw(requestParameters: GetProjectGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetContactListGroups200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContactListGroups200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of project groups
     * Get list of project groups
     */
    async getProjectGroups(requestParameters: GetProjectGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetContactListGroups200Response> {
        const response = await this.getProjectGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of projects
     * Get list of projects
     */
    async getProjectListRaw(requestParameters: GetProjectListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProjectList200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetProjectListRequestToJSON(requestParameters['getProjectListRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProjectList200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of projects
     * Get list of projects
     */
    async getProjectList(requestParameters: GetProjectListOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProjectList200Response> {
        const response = await this.getProjectListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of all project templates
     * Get list of project templates
     */
    async getProjectListTemplatesRaw(requestParameters: GetProjectListTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProjectListTemplates200Response>> {
        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sourceId'] != null) {
            queryParameters['sourceId'] = requestParameters['sourceId'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project/templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProjectListTemplates200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of all project templates
     * Get list of project templates
     */
    async getProjectListTemplates(requestParameters: GetProjectListTemplatesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProjectListTemplates200Response> {
        const response = await this.getProjectListTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you create a new project
     * Create project
     */
    async postProjectRaw(requestParameters: PostProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostContact201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectRequestToJSON(requestParameters['projectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostContact201ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you create a new project
     * Create project
     */
    async postProject(requestParameters: PostProjectRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostContact201Response> {
        const response = await this.postProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you update the project data by number
     * Update project by number
     */
    async postProjectByIdRaw(requestParameters: PostProjectByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostContactById200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postProjectById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['silent'] != null) {
            queryParameters['silent'] = requestParameters['silent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/project/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectUpdateRequestToJSON(requestParameters['projectUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostContactById200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you update the project data by number
     * Update project by number
     */
    async postProjectById(requestParameters: PostProjectByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostContactById200Response> {
        const response = await this.postProjectByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
