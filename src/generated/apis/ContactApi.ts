/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseError,
  CommentCreateRequest,
  CommentUpdateRequest,
  ContactRequest,
  DataTagEntryCreateRequest,
  GetContactById200Response,
  GetContactComments200Response,
  GetContactCommentsRequest,
  GetContactFiles200Response,
  GetContactList200Response,
  GetContactListGroups200Response,
  GetContactListRequest,
  GetContactListTemplates200Response,
  PostContact201Response,
  PostContactAddDataTagEntryExistingComment201Response,
  PostContactAddDataTagEntryNewComment201Response,
  PostContactById200Response,
  PostContactFilters200Response,
  PostContactImportRequest,
} from '../models/index';
import {
    ApiResponseErrorFromJSON,
    ApiResponseErrorToJSON,
    CommentCreateRequestFromJSON,
    CommentCreateRequestToJSON,
    CommentUpdateRequestFromJSON,
    CommentUpdateRequestToJSON,
    ContactRequestFromJSON,
    ContactRequestToJSON,
    DataTagEntryCreateRequestFromJSON,
    DataTagEntryCreateRequestToJSON,
    GetContactById200ResponseFromJSON,
    GetContactById200ResponseToJSON,
    GetContactComments200ResponseFromJSON,
    GetContactComments200ResponseToJSON,
    GetContactCommentsRequestFromJSON,
    GetContactCommentsRequestToJSON,
    GetContactFiles200ResponseFromJSON,
    GetContactFiles200ResponseToJSON,
    GetContactList200ResponseFromJSON,
    GetContactList200ResponseToJSON,
    GetContactListGroups200ResponseFromJSON,
    GetContactListGroups200ResponseToJSON,
    GetContactListRequestFromJSON,
    GetContactListRequestToJSON,
    GetContactListTemplates200ResponseFromJSON,
    GetContactListTemplates200ResponseToJSON,
    PostContact201ResponseFromJSON,
    PostContact201ResponseToJSON,
    PostContactAddDataTagEntryExistingComment201ResponseFromJSON,
    PostContactAddDataTagEntryExistingComment201ResponseToJSON,
    PostContactAddDataTagEntryNewComment201ResponseFromJSON,
    PostContactAddDataTagEntryNewComment201ResponseToJSON,
    PostContactById200ResponseFromJSON,
    PostContactById200ResponseToJSON,
    PostContactFilters200ResponseFromJSON,
    PostContactFilters200ResponseToJSON,
    PostContactImportRequestFromJSON,
    PostContactImportRequestToJSON,
} from '../models/index';

export interface GetContactByIdRequest {
    id: string;
    fields?: string;
    sourceId?: string;
}

export interface GetContactCommentsOperationRequest {
    id: string;
    getContactCommentsRequest?: GetContactCommentsRequest;
}

export interface GetContactFilesRequest {
    id: string;
    onlyFromDescription?: boolean;
}

export interface GetContactListOperationRequest {
    getContactListRequest?: GetContactListRequest;
}

export interface GetContactListGroupsRequest {
    fields?: string;
}

export interface GetContactListTemplatesRequest {
    offset?: number;
    pageSize?: number;
    isCompany?: boolean;
    sourceId?: string;
    fields?: string;
}

export interface PostContactRequest {
    contactRequest?: ContactRequest;
}

export interface PostContactAddCommentRequest {
    id: string;
    commentCreateRequest?: CommentCreateRequest;
}

export interface PostContactAddDataTagEntryExistingCommentRequest {
    id: string;
    commentId: number;
    dataTagEntryCreateRequest?: DataTagEntryCreateRequest;
}

export interface PostContactAddDataTagEntryNewCommentRequest {
    id: string;
    dataTagEntryCreateRequest?: DataTagEntryCreateRequest;
}

export interface PostContactByIdRequest {
    id: string;
    silent?: boolean;
    contactRequest?: ContactRequest;
}

export interface PostContactImportOperationRequest {
    postContactImportRequest?: PostContactImportRequest;
}

export interface PostContactUpdateCommentRequest {
    id: string;
    commentId: number;
    silent?: boolean;
    commentUpdateRequest?: CommentUpdateRequest;
}

/**
 * 
 */
export class ContactApi extends runtime.BaseAPI {

    /**
     * This method lets you get a contact or company by number
     * Get contact by number
     */
    async getContactByIdRaw(requestParameters: GetContactByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetContactById200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getContactById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['sourceId'] != null) {
            queryParameters['sourceId'] = requestParameters['sourceId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contact/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContactById200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a contact or company by number
     * Get contact by number
     */
    async getContactById(requestParameters: GetContactByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetContactById200Response> {
        const response = await this.getContactByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of comments added to a contact
     * Get list of comments added to contact
     */
    async getContactCommentsRaw(requestParameters: GetContactCommentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetContactComments200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getContactComments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contact/{id}/comments/list`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetContactCommentsRequestToJSON(requestParameters['getContactCommentsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContactComments200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of comments added to a contact
     * Get list of comments added to contact
     */
    async getContactComments(requestParameters: GetContactCommentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetContactComments200Response> {
        const response = await this.getContactCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get contatc files
     * Get contact files
     */
    async getContactFilesRaw(requestParameters: GetContactFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetContactFiles200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getContactFiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['onlyFromDescription'] != null) {
            queryParameters['onlyFromDescription'] = requestParameters['onlyFromDescription'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contact/{id}/files`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContactFiles200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get contatc files
     * Get contact files
     */
    async getContactFiles(requestParameters: GetContactFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetContactFiles200Response> {
        const response = await this.getContactFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of contacts and companies
     * Get list of contacts and companies
     */
    async getContactListRaw(requestParameters: GetContactListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetContactList200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contact/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetContactListRequestToJSON(requestParameters['getContactListRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContactList200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of contacts and companies
     * Get list of contacts and companies
     */
    async getContactList(requestParameters: GetContactListOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetContactList200Response> {
        const response = await this.getContactListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of all company groups
     * Get list of contact groups
     */
    async getContactListGroupsRaw(requestParameters: GetContactListGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetContactListGroups200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contact/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContactListGroups200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of all company groups
     * Get list of contact groups
     */
    async getContactListGroups(requestParameters: GetContactListGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetContactListGroups200Response> {
        const response = await this.getContactListGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of all contact or company templates
     * Get list of contact or company templates
     */
    async getContactListTemplatesRaw(requestParameters: GetContactListTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetContactListTemplates200Response>> {
        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['isCompany'] != null) {
            queryParameters['isCompany'] = requestParameters['isCompany'];
        }

        if (requestParameters['sourceId'] != null) {
            queryParameters['sourceId'] = requestParameters['sourceId'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contact/templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContactListTemplates200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of all contact or company templates
     * Get list of contact or company templates
     */
    async getContactListTemplates(requestParameters: GetContactListTemplatesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetContactListTemplates200Response> {
        const response = await this.getContactListTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you create a new contact or company
     * Create contact or company
     */
    async postContactRaw(requestParameters: PostContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostContact201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const contactId = requestParameters['contactRequest']?.id;
        delete requestParameters['contactRequest']?.id;
        const response = await this.request({
            path: `/contact/${contactId}?silent=true`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactRequestToJSON(requestParameters['contactRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostContact201ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you create a new contact or company
     * Create contact or company
     */
    async postContact(requestParameters: PostContactRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostContact201Response> {
        const response = await this.postContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you add a new comment to a contact
     * Add comment
     */
    async postContactAddCommentRaw(requestParameters: PostContactAddCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostContact201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postContactAddComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contact/{id}/comments/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentCreateRequestToJSON(requestParameters['commentCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostContact201ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you add a new comment to a contact
     * Add comment
     */
    async postContactAddComment(requestParameters: PostContactAddCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostContact201Response> {
        const response = await this.postContactAddCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you add a data tag entry to an existing comment
     * Add a data tag entry to an existing comment
     */
    async postContactAddDataTagEntryExistingCommentRaw(requestParameters: PostContactAddDataTagEntryExistingCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostContactAddDataTagEntryExistingComment201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postContactAddDataTagEntryExistingComment().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling postContactAddDataTagEntryExistingComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contact/{id}/datatags/{commentId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataTagEntryCreateRequestToJSON(requestParameters['dataTagEntryCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostContactAddDataTagEntryExistingComment201ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you add a data tag entry to an existing comment
     * Add a data tag entry to an existing comment
     */
    async postContactAddDataTagEntryExistingComment(requestParameters: PostContactAddDataTagEntryExistingCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostContactAddDataTagEntryExistingComment201Response> {
        const response = await this.postContactAddDataTagEntryExistingCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you add a data tag entry with a new comment
     * Add a data tag entry with a new comment
     */
    async postContactAddDataTagEntryNewCommentRaw(requestParameters: PostContactAddDataTagEntryNewCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostContactAddDataTagEntryNewComment201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postContactAddDataTagEntryNewComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contact/{id}/datatags/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataTagEntryCreateRequestToJSON(requestParameters['dataTagEntryCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostContactAddDataTagEntryNewComment201ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you add a data tag entry with a new comment
     * Add a data tag entry with a new comment
     */
    async postContactAddDataTagEntryNewComment(requestParameters: PostContactAddDataTagEntryNewCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostContactAddDataTagEntryNewComment201Response> {
        const response = await this.postContactAddDataTagEntryNewCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you update a contact or company by number
     * Update contact by number
     */
    async postContactByIdRaw(requestParameters: PostContactByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostContactById200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postContactById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['silent'] != null) {
            queryParameters['silent'] = requestParameters['silent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contact/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactRequestToJSON(requestParameters['contactRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostContactById200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you update a contact or company by number
     * Update contact by number
     */
    async postContactById(requestParameters: PostContactByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostContactById200Response | null | undefined > {
        const response = await this.postContactByIdRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 202:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * This method lets you get list contact filters
     * Get list contact filters
     */
    async postContactFiltersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostContactFilters200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contact/filters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostContactFilters200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get list contact filters
     * Get list contact filters
     */
    async postContactFilters(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostContactFilters200Response> {
        const response = await this.postContactFiltersRaw(initOverrides);
        return await response.value();
    }

    /**
     * This method lets you import a list of companies or contacts into Planfix
     * Import contact list
     */
    async postContactImportRaw(requestParameters: PostContactImportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contact/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostContactImportRequestToJSON(requestParameters['postContactImportRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method lets you import a list of companies or contacts into Planfix
     * Import contact list
     */
    async postContactImport(requestParameters: PostContactImportOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postContactImportRaw(requestParameters, initOverrides);
    }

    /**
     * This method lets you update a comment
     * Update comment
     */
    async postContactUpdateCommentRaw(requestParameters: PostContactUpdateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postContactUpdateComment().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling postContactUpdateComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['silent'] != null) {
            queryParameters['silent'] = requestParameters['silent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contact/{id}/comments/{commentId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentUpdateRequestToJSON(requestParameters['commentUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method lets you update a comment
     * Update comment
     */
    async postContactUpdateComment(requestParameters: PostContactUpdateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postContactUpdateCommentRaw(requestParameters, initOverrides);
    }

}
