/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseError,
  DataTagEntryUpdateRequest,
  GetDataTags200Response,
  GetDataTagsRequest,
  GetDatatagEntryKey200Response,
  GetDatatagId200Response,
  PostListDataTagEntries200Response,
  PostListDataTagEntriesRequest,
} from '../models/index';
import {
    ApiResponseErrorFromJSON,
    ApiResponseErrorToJSON,
    DataTagEntryUpdateRequestFromJSON,
    DataTagEntryUpdateRequestToJSON,
    GetDataTags200ResponseFromJSON,
    GetDataTags200ResponseToJSON,
    GetDataTagsRequestFromJSON,
    GetDataTagsRequestToJSON,
    GetDatatagEntryKey200ResponseFromJSON,
    GetDatatagEntryKey200ResponseToJSON,
    GetDatatagId200ResponseFromJSON,
    GetDatatagId200ResponseToJSON,
    PostListDataTagEntries200ResponseFromJSON,
    PostListDataTagEntries200ResponseToJSON,
    PostListDataTagEntriesRequestFromJSON,
    PostListDataTagEntriesRequestToJSON,
} from '../models/index';

export interface DeleteDatatagEntryKeyRequest {
    key: number;
}

export interface GetDataTagsOperationRequest {
    getDataTagsRequest?: GetDataTagsRequest;
}

export interface GetDatatagEntryKeyRequest {
    key: number;
    fields?: string;
}

export interface GetDatatagIdRequest {
    id: number;
    fields?: string;
}

export interface PostListDataTagEntriesOperationRequest {
    id: number;
    postListDataTagEntriesRequest?: PostListDataTagEntriesRequest;
}

export interface PostUpdateDataTagEntryRequest {
    key: number;
    silent?: boolean;
    dataTagEntryUpdateRequest?: DataTagEntryUpdateRequest;
}

/**
 * 
 */
export class DataTagsApi extends runtime.BaseAPI {

    /**
     * This method lets you delete a data tag entry by key
     * Delete data tag entry
     */
    async deleteDatatagEntryKeyRaw(requestParameters: DeleteDatatagEntryKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling deleteDatatagEntryKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/datatag/entry/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method lets you delete a data tag entry by key
     * Delete data tag entry
     */
    async deleteDatatagEntryKey(requestParameters: DeleteDatatagEntryKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDatatagEntryKeyRaw(requestParameters, initOverrides);
    }

    /**
     * This method lets you get a list of data tags
     * Get data tags
     */
    async getDataTagsRaw(requestParameters: GetDataTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDataTags200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/datatag/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetDataTagsRequestToJSON(requestParameters['getDataTagsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDataTags200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of data tags
     * Get data tags
     */
    async getDataTags(requestParameters: GetDataTagsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDataTags200Response> {
        const response = await this.getDataTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a data tag entry by key
     * Get data tag entry
     */
    async getDatatagEntryKeyRaw(requestParameters: GetDatatagEntryKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDatatagEntryKey200Response>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling getDatatagEntryKey().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/datatag/entry/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDatatagEntryKey200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a data tag entry by key
     * Get data tag entry
     */
    async getDatatagEntryKey(requestParameters: GetDatatagEntryKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDatatagEntryKey200Response> {
        const response = await this.getDatatagEntryKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a data tag by its ID
     * Get data tag by identifier
     */
    async getDatatagIdRaw(requestParameters: GetDatatagIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDatatagId200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDatatagId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/datatag/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDatatagId200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a data tag by its ID
     * Get data tag by identifier
     */
    async getDatatagId(requestParameters: GetDatatagIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDatatagId200Response> {
        const response = await this.getDatatagIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of data tag entries
     * Get list of data tag entries
     */
    async postListDataTagEntriesRaw(requestParameters: PostListDataTagEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostListDataTagEntries200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postListDataTagEntries().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/datatag/{id}/entry/list`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostListDataTagEntriesRequestToJSON(requestParameters['postListDataTagEntriesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostListDataTagEntries200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of data tag entries
     * Get list of data tag entries
     */
    async postListDataTagEntries(requestParameters: PostListDataTagEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostListDataTagEntries200Response> {
        const response = await this.postListDataTagEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you update a data tag entry
     * Update data tag entry
     */
    async postUpdateDataTagEntryRaw(requestParameters: PostUpdateDataTagEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling postUpdateDataTagEntry().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['silent'] != null) {
            queryParameters['silent'] = requestParameters['silent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/datatag/entry/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataTagEntryUpdateRequestToJSON(requestParameters['dataTagEntryUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method lets you update a data tag entry
     * Update data tag entry
     */
    async postUpdateDataTagEntry(requestParameters: PostUpdateDataTagEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUpdateDataTagEntryRaw(requestParameters, initOverrides);
    }

}
