/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseError,
  CommentCreateRequest,
  CommentUpdateRequest,
  DataTagEntryCreateRequest,
  GetContactComments200Response,
  GetContactCommentsRequest,
  GetContactFiles200Response,
  GetTaskById200Response,
  GetTaskChecklist200Response,
  GetTaskChecklistRequest,
  GetTaskList200Response,
  GetTaskListRequest,
  GetTaskListTemplates200Response,
  PostContact201Response,
  PostContactById200Response,
  PostContactFilters200Response,
  PostTaskAddDataTagEntryExistingComment201Response,
  PostTaskAddDataTagEntryNewComment201Response,
  TaskCreateRequest,
  TaskUpdateRequest,
} from '../models/index';
import {
    ApiResponseErrorFromJSON,
    ApiResponseErrorToJSON,
    CommentCreateRequestFromJSON,
    CommentCreateRequestToJSON,
    CommentUpdateRequestFromJSON,
    CommentUpdateRequestToJSON,
    DataTagEntryCreateRequestFromJSON,
    DataTagEntryCreateRequestToJSON,
    GetContactComments200ResponseFromJSON,
    GetContactComments200ResponseToJSON,
    GetContactCommentsRequestFromJSON,
    GetContactCommentsRequestToJSON,
    GetContactFiles200ResponseFromJSON,
    GetContactFiles200ResponseToJSON,
    GetTaskById200ResponseFromJSON,
    GetTaskById200ResponseToJSON,
    GetTaskChecklist200ResponseFromJSON,
    GetTaskChecklist200ResponseToJSON,
    GetTaskChecklistRequestFromJSON,
    GetTaskChecklistRequestToJSON,
    GetTaskList200ResponseFromJSON,
    GetTaskList200ResponseToJSON,
    GetTaskListRequestFromJSON,
    GetTaskListRequestToJSON,
    GetTaskListTemplates200ResponseFromJSON,
    GetTaskListTemplates200ResponseToJSON,
    PostContact201ResponseFromJSON,
    PostContact201ResponseToJSON,
    PostContactById200ResponseFromJSON,
    PostContactById200ResponseToJSON,
    PostContactFilters200ResponseFromJSON,
    PostContactFilters200ResponseToJSON,
    PostTaskAddDataTagEntryExistingComment201ResponseFromJSON,
    PostTaskAddDataTagEntryExistingComment201ResponseToJSON,
    PostTaskAddDataTagEntryNewComment201ResponseFromJSON,
    PostTaskAddDataTagEntryNewComment201ResponseToJSON,
    TaskCreateRequestFromJSON,
    TaskCreateRequestToJSON,
    TaskUpdateRequestFromJSON,
    TaskUpdateRequestToJSON,
} from '../models/index';

export interface GetTaskByIdRequest {
    id: number;
    fields?: string;
    sourceId?: string;
}

export interface GetTaskChecklistOperationRequest {
    id: number;
    getTaskChecklistRequest?: GetTaskChecklistRequest;
}

export interface GetTaskCommentsRequest {
    id: number;
    getContactCommentsRequest?: GetContactCommentsRequest;
}

export interface GetTaskFilesRequest {
    id: string;
    onlyFromDescription?: boolean;
}

export interface GetTaskListOperationRequest {
    getTaskListRequest?: GetTaskListRequest;
}

export interface GetTaskListRecurringRequest {
    offset?: number;
    pageSize?: number;
    sourceId?: string;
    fields?: string;
}

export interface GetTaskListTemplatesRequest {
    offset?: number;
    pageSize?: number;
    sourceId?: string;
    fields?: string;
}

export interface PostTaskRequest {
    taskCreateRequest?: TaskCreateRequest;
}

export interface PostTaskAddCommentRequest {
    id: number;
    commentCreateRequest?: CommentCreateRequest;
}

export interface PostTaskAddDataTagEntryExistingCommentRequest {
    id: number;
    commentId: number;
    dataTagEntryCreateRequest?: DataTagEntryCreateRequest;
}

export interface PostTaskAddDataTagEntryNewCommentRequest {
    id: number;
    dataTagEntryCreateRequest?: DataTagEntryCreateRequest;
}

export interface PostTaskByIdRequest {
    id: number;
    silent?: boolean;
    taskUpdateRequest?: TaskUpdateRequest;
}

export interface PostTaskUpdateCommentRequest {
    id: number;
    commentId: number;
    silent?: boolean;
    commentUpdateRequest?: CommentUpdateRequest;
}

/**
 * 
 */
export class TaskApi extends runtime.BaseAPI {

    /**
     * This method lets you get a task by number
     * Get task by number
     */
    async getTaskByIdRaw(requestParameters: GetTaskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTaskById200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTaskById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['sourceId'] != null) {
            queryParameters['sourceId'] = requestParameters['sourceId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTaskById200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a task by number
     * Get task by number
     */
    async getTaskById(requestParameters: GetTaskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTaskById200Response> {
        const response = await this.getTaskByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get task checklist items
     * Get task checklist items
     */
    async getTaskChecklistRaw(requestParameters: GetTaskChecklistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTaskChecklist200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTaskChecklist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task/{id}/checklist/list`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetTaskChecklistRequestToJSON(requestParameters['getTaskChecklistRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTaskChecklist200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get task checklist items
     * Get task checklist items
     */
    async getTaskChecklist(requestParameters: GetTaskChecklistOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTaskChecklist200Response> {
        const response = await this.getTaskChecklistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of comments on a task
     * Get task comments
     */
    async getTaskCommentsRaw(requestParameters: GetTaskCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetContactComments200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTaskComments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task/{id}/comments/list`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetContactCommentsRequestToJSON(requestParameters['getContactCommentsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContactComments200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of comments on a task
     * Get task comments
     */
    async getTaskComments(requestParameters: GetTaskCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetContactComments200Response> {
        const response = await this.getTaskCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get task files
     * Get task files
     */
    async getTaskFilesRaw(requestParameters: GetTaskFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetContactFiles200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTaskFiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['onlyFromDescription'] != null) {
            queryParameters['onlyFromDescription'] = requestParameters['onlyFromDescription'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task/{id}/files`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContactFiles200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get task files
     * Get task files
     */
    async getTaskFiles(requestParameters: GetTaskFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetContactFiles200Response> {
        const response = await this.getTaskFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of tasks
     * Get list of tasks
     */
    async getTaskListRaw(requestParameters: GetTaskListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTaskList200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const body = GetTaskListRequestToJSON(requestParameters['getTaskListRequest']);
        // console.log(JSON.stringify(body));
        const response = await this.request({
            path: `/task/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTaskList200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of tasks
     * Get list of tasks
     */
    async getTaskList(requestParameters: GetTaskListOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTaskList200Response> {
        const response = await this.getTaskListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method allows you to get a list of recurring tasks.
     * Get a list of recurring tasks
     */
    async getTaskListRecurringRaw(requestParameters: GetTaskListRecurringRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTaskList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sourceId'] != null) {
            queryParameters['sourceId'] = requestParameters['sourceId'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task/recurring`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTaskList200ResponseFromJSON(jsonValue));
    }

    /**
     * This method allows you to get a list of recurring tasks.
     * Get a list of recurring tasks
     */
    async getTaskListRecurring(requestParameters: GetTaskListRecurringRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTaskList200Response> {
        const response = await this.getTaskListRecurringRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of all task templates
     * Get list of task templates
     */
    async getTaskListTemplatesRaw(requestParameters: GetTaskListTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTaskListTemplates200Response>> {
        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sourceId'] != null) {
            queryParameters['sourceId'] = requestParameters['sourceId'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task/templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTaskListTemplates200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of all task templates
     * Get list of task templates
     */
    async getTaskListTemplates(requestParameters: GetTaskListTemplatesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTaskListTemplates200Response> {
        const response = await this.getTaskListTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you create a new task
     * Create task
     */
    async postTaskRaw(requestParameters: PostTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostContact201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskCreateRequestToJSON(requestParameters['taskCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostContact201ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you create a new task
     * Create task
     */
    async postTask(requestParameters: PostTaskRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostContact201Response> {
        const response = await this.postTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you add a new comment to a task
     * Add comment
     */
    async postTaskAddCommentRaw(requestParameters: PostTaskAddCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostContact201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postTaskAddComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task/{id}/comments/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentCreateRequestToJSON(requestParameters['commentCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostContact201ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you add a new comment to a task
     * Add comment
     */
    async postTaskAddComment(requestParameters: PostTaskAddCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostContact201Response> {
        const response = await this.postTaskAddCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you add a data tag entry to an existing comment
     * Add a data tag entry to an existing comment
     */
    async postTaskAddDataTagEntryExistingCommentRaw(requestParameters: PostTaskAddDataTagEntryExistingCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostTaskAddDataTagEntryExistingComment201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postTaskAddDataTagEntryExistingComment().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling postTaskAddDataTagEntryExistingComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task/{id}/datatags/{commentId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataTagEntryCreateRequestToJSON(requestParameters['dataTagEntryCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostTaskAddDataTagEntryExistingComment201ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you add a data tag entry to an existing comment
     * Add a data tag entry to an existing comment
     */
    async postTaskAddDataTagEntryExistingComment(requestParameters: PostTaskAddDataTagEntryExistingCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostTaskAddDataTagEntryExistingComment201Response> {
        const response = await this.postTaskAddDataTagEntryExistingCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you add data tag entry as new comment
     * Add data tag entry as new comment
     */
    async postTaskAddDataTagEntryNewCommentRaw(requestParameters: PostTaskAddDataTagEntryNewCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostTaskAddDataTagEntryNewComment201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postTaskAddDataTagEntryNewComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task/{id}/datatags/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataTagEntryCreateRequestToJSON(requestParameters['dataTagEntryCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostTaskAddDataTagEntryNewComment201ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you add data tag entry as new comment
     * Add data tag entry as new comment
     */
    async postTaskAddDataTagEntryNewComment(requestParameters: PostTaskAddDataTagEntryNewCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostTaskAddDataTagEntryNewComment201Response> {
        const response = await this.postTaskAddDataTagEntryNewCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you update a task by number
     * Update task by number
     */
    async postTaskByIdRaw(requestParameters: PostTaskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostContactById200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postTaskById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['silent'] != null) {
            queryParameters['silent'] = requestParameters['silent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskUpdateRequestToJSON(requestParameters['taskUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostContactById200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you update a task by number
     * Update task by number
     */
    async postTaskById(requestParameters: PostTaskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostContactById200Response | null | undefined > {
        const response = await this.postTaskByIdRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 202:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * This method lets you get list task filters
     * Get list task filters
     */
    async postTaskFiltersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostContactFilters200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task/filters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostContactFilters200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get list task filters
     * Get list task filters
     */
    async postTaskFilters(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostContactFilters200Response> {
        const response = await this.postTaskFiltersRaw(initOverrides);
        return await response.value();
    }

    /**
     * This method lets you update a comment
     * Updating comments
     */
    async postTaskUpdateCommentRaw(requestParameters: PostTaskUpdateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postTaskUpdateComment().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling postTaskUpdateComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['silent'] != null) {
            queryParameters['silent'] = requestParameters['silent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/task/{id}/comments/{commentId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentUpdateRequestToJSON(requestParameters['commentUpdateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method lets you update a comment
     * Updating comments
     */
    async postTaskUpdateComment(requestParameters: PostTaskUpdateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postTaskUpdateCommentRaw(requestParameters, initOverrides);
    }

}
