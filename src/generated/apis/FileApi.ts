/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseError,
  FileUploadRequest,
  GetFileId200Response,
  PostFileUpdate200Response,
  PostFileUpdateRequest,
  PostFileUpload200Response,
} from '../models/index';
import {
    ApiResponseErrorFromJSON,
    ApiResponseErrorToJSON,
    FileUploadRequestFromJSON,
    FileUploadRequestToJSON,
    GetFileId200ResponseFromJSON,
    GetFileId200ResponseToJSON,
    PostFileUpdate200ResponseFromJSON,
    PostFileUpdate200ResponseToJSON,
    PostFileUpdateRequestFromJSON,
    PostFileUpdateRequestToJSON,
    PostFileUpload200ResponseFromJSON,
    PostFileUpload200ResponseToJSON,
} from '../models/index';

export interface AttachFileToContactRequest {
    id: number;
    id2: number;
}

export interface AttachFileToProjectRequest {
    id: number;
    id2: number;
}

export interface AttachFileToTaskRequest {
    id: number;
    id2: number;
}

export interface DeleteFileIdRequest {
    id: number;
}

export interface GetFileIdRequest {
    id: number;
    fields?: string;
}

export interface GetFileIdDownloadRequest {
    id: number;
}

export interface PostFileUpdateOperationRequest {
    id: number;
    postFileUpdateRequest?: PostFileUpdateRequest;
}

export interface PostFileUploadRequest {
    file: Blob;
}

export interface PostFileUploadByUrlRequest {
    fileUploadRequest?: FileUploadRequest;
}

/**
 * 
 */
export class FileApi extends runtime.BaseAPI {

    /**
     * This method lets you attach file to target contact
     * Attach file to contact
     */
    async attachFileToContactRaw(requestParameters: AttachFileToContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostFileUpdate200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling attachFileToContact().'
            );
        }

        if (requestParameters['id2'] == null) {
            throw new runtime.RequiredError(
                'id2',
                'Required parameter "id2" was null or undefined when calling attachFileToContact().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id2'] != null) {
            queryParameters['id'] = requestParameters['id2'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/file/{id}/attach/contact`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFileUpdate200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you attach file to target contact
     * Attach file to contact
     */
    async attachFileToContact(requestParameters: AttachFileToContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostFileUpdate200Response> {
        const response = await this.attachFileToContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you attach file to target project
     * Attach file to project
     */
    async attachFileToProjectRaw(requestParameters: AttachFileToProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostFileUpdate200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling attachFileToProject().'
            );
        }

        if (requestParameters['id2'] == null) {
            throw new runtime.RequiredError(
                'id2',
                'Required parameter "id2" was null or undefined when calling attachFileToProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id2'] != null) {
            queryParameters['id'] = requestParameters['id2'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/file/{id}/attach/project`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFileUpdate200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you attach file to target project
     * Attach file to project
     */
    async attachFileToProject(requestParameters: AttachFileToProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostFileUpdate200Response> {
        const response = await this.attachFileToProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you attach file to target task
     * Attach file to task
     */
    async attachFileToTaskRaw(requestParameters: AttachFileToTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostFileUpdate200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling attachFileToTask().'
            );
        }

        if (requestParameters['id2'] == null) {
            throw new runtime.RequiredError(
                'id2',
                'Required parameter "id2" was null or undefined when calling attachFileToTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id2'] != null) {
            queryParameters['id'] = requestParameters['id2'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/file/{id}/attach/task`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFileUpdate200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you attach file to target task
     * Attach file to task
     */
    async attachFileToTask(requestParameters: AttachFileToTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostFileUpdate200Response> {
        const response = await this.attachFileToTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you delete a file by its ID
     * Delete file
     */
    async deleteFileIdRaw(requestParameters: DeleteFileIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostFileUpdate200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteFileId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/file/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFileUpdate200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you delete a file by its ID
     * Delete file
     */
    async deleteFileId(requestParameters: DeleteFileIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostFileUpdate200Response> {
        const response = await this.deleteFileIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a file by its ID
     * Get file by identifier
     */
    async getFileIdRaw(requestParameters: GetFileIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFileId200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getFileId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/file/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFileId200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a file by its ID
     * Get file by identifier
     */
    async getFileId(requestParameters: GetFileIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFileId200Response> {
        const response = await this.getFileIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you download file
     * Download file
     */
    async getFileIdDownloadRaw(requestParameters: GetFileIdDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getFileIdDownload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/file/{id}/download`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method lets you download file
     * Download file
     */
    async getFileIdDownload(requestParameters: GetFileIdDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getFileIdDownloadRaw(requestParameters, initOverrides);
    }

    /**
     * This method lets you update a file name
     * Update file
     */
    async postFileUpdateRaw(requestParameters: PostFileUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostFileUpdate200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postFileUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/file/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostFileUpdateRequestToJSON(requestParameters['postFileUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFileUpdate200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you update a file name
     * Update file
     */
    async postFileUpdate(requestParameters: PostFileUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostFileUpdate200Response> {
        const response = await this.postFileUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you upload file to Planfix
     * Upload file
     */
    async postFileUploadRaw(requestParameters: PostFileUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostFileUpload200Response>> {
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling postFileUpload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/file/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFileUpload200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you upload file to Planfix
     * Upload file
     */
    async postFileUpload(requestParameters: PostFileUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostFileUpload200Response> {
        const response = await this.postFileUploadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you upload a file to Planfix using a link
     * Upload file by link
     */
    async postFileUploadByUrlRaw(requestParameters: PostFileUploadByUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostFileUpload200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/file/from-url/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileUploadRequestToJSON(requestParameters['fileUploadRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFileUpload200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you upload a file to Planfix using a link
     * Upload file by link
     */
    async postFileUploadByUrl(requestParameters: PostFileUploadByUrlRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostFileUpload200Response> {
        const response = await this.postFileUploadByUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
