/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseError,
  DirectoryEntryRequest,
  GetContactListGroups200Response,
  GetDirectoryById200Response,
  GetDirectoryIdEntryKey200Response,
  GetListDirectories200Response,
  GetListDirectoriesRequest,
  PostContactFilters200Response,
  PostListDirectoryEntries200Response,
  PostListDirectoryEntriesRequest,
} from '../models/index';
import {
    ApiResponseErrorFromJSON,
    ApiResponseErrorToJSON,
    DirectoryEntryRequestFromJSON,
    DirectoryEntryRequestToJSON,
    GetContactListGroups200ResponseFromJSON,
    GetContactListGroups200ResponseToJSON,
    GetDirectoryById200ResponseFromJSON,
    GetDirectoryById200ResponseToJSON,
    GetDirectoryIdEntryKey200ResponseFromJSON,
    GetDirectoryIdEntryKey200ResponseToJSON,
    GetListDirectories200ResponseFromJSON,
    GetListDirectories200ResponseToJSON,
    GetListDirectoriesRequestFromJSON,
    GetListDirectoriesRequestToJSON,
    PostContactFilters200ResponseFromJSON,
    PostContactFilters200ResponseToJSON,
    PostListDirectoryEntries200ResponseFromJSON,
    PostListDirectoryEntries200ResponseToJSON,
    PostListDirectoryEntriesRequestFromJSON,
    PostListDirectoryEntriesRequestToJSON,
} from '../models/index';

export interface DeleteDirectoryEntryKeyRequest {
    key: number;
    id: string;
}

export interface GetDirectoriesGroupsRequest {
    fields?: string;
}

export interface GetDirectoryByIdRequest {
    id: number;
    fields?: string;
}

export interface GetDirectoryIdEntryKeyRequest {
    id: string;
    key: number;
    fields?: string;
}

export interface GetListDirectoriesOperationRequest {
    getListDirectoriesRequest?: GetListDirectoriesRequest;
}

export interface PostAddDirectoryEntryRequest {
    id: number;
    directoryEntryRequest?: DirectoryEntryRequest;
}

export interface PostDirectoryEntriesFiltersRequest {
    id: string;
}

export interface PostListDirectoryEntriesOperationRequest {
    id: string;
    postListDirectoryEntriesRequest?: PostListDirectoryEntriesRequest;
}

export interface PostUpdateDirectoryEntryRequest {
    key: number;
    id: string;
    silent?: boolean;
    directoryEntryRequest?: DirectoryEntryRequest;
}

/**
 * 
 */
export class DirectoryApi extends runtime.BaseAPI {

    /**
     * This method lets you delete a directory entry by key
     * Delete directory entry
     */
    async deleteDirectoryEntryKeyRaw(requestParameters: DeleteDirectoryEntryKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling deleteDirectoryEntryKey().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDirectoryEntryKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/directory/{id}/entry/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method lets you delete a directory entry by key
     * Delete directory entry
     */
    async deleteDirectoryEntryKey(requestParameters: DeleteDirectoryEntryKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDirectoryEntryKeyRaw(requestParameters, initOverrides);
    }

    /**
     * This method lets you get a list of directory groups
     * Get list of directory groups
     */
    async getDirectoriesGroupsRaw(requestParameters: GetDirectoriesGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetContactListGroups200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/directory/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContactListGroups200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of directory groups
     * Get list of directory groups
     */
    async getDirectoriesGroups(requestParameters: GetDirectoriesGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetContactListGroups200Response> {
        const response = await this.getDirectoriesGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a directory from its ID
     * Get directory by identifier
     */
    async getDirectoryByIdRaw(requestParameters: GetDirectoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDirectoryById200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDirectoryById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/directory/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDirectoryById200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a directory from its ID
     * Get directory by identifier
     */
    async getDirectoryById(requestParameters: GetDirectoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDirectoryById200Response> {
        const response = await this.getDirectoryByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you geta directory entry by its key
     * Get directory entry
     */
    async getDirectoryIdEntryKeyRaw(requestParameters: GetDirectoryIdEntryKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDirectoryIdEntryKey200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDirectoryIdEntryKey().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling getDirectoryIdEntryKey().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/directory/{id}/entry/{key}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDirectoryIdEntryKey200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you geta directory entry by its key
     * Get directory entry
     */
    async getDirectoryIdEntryKey(requestParameters: GetDirectoryIdEntryKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDirectoryIdEntryKey200Response> {
        const response = await this.getDirectoryIdEntryKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of directories
     * Get list of directories
     */
    async getListDirectoriesRaw(requestParameters: GetListDirectoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetListDirectories200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/directory/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetListDirectoriesRequestToJSON(requestParameters['getListDirectoriesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListDirectories200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of directories
     * Get list of directories
     */
    async getListDirectories(requestParameters: GetListDirectoriesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetListDirectories200Response> {
        const response = await this.getListDirectoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you add a directory entry
     * Add directory entry
     */
    async postAddDirectoryEntryRaw(requestParameters: PostAddDirectoryEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postAddDirectoryEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/directory/{id}/entry/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DirectoryEntryRequestToJSON(requestParameters['directoryEntryRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method lets you add a directory entry
     * Add directory entry
     */
    async postAddDirectoryEntry(requestParameters: PostAddDirectoryEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postAddDirectoryEntryRaw(requestParameters, initOverrides);
    }

    /**
     * This method lets you get list directory entries filters
     * Get list directory entries filters
     */
    async postDirectoryEntriesFiltersRaw(requestParameters: PostDirectoryEntriesFiltersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostContactFilters200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postDirectoryEntriesFilters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/directory/{id}/filters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostContactFilters200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get list directory entries filters
     * Get list directory entries filters
     */
    async postDirectoryEntriesFilters(requestParameters: PostDirectoryEntriesFiltersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostContactFilters200Response> {
        const response = await this.postDirectoryEntriesFiltersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you to get a list of directory entries
     * Get list of directory entries
     */
    async postListDirectoryEntriesRaw(requestParameters: PostListDirectoryEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostListDirectoryEntries200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postListDirectoryEntries().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/directory/{id}/entry/list`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostListDirectoryEntriesRequestToJSON(requestParameters['postListDirectoryEntriesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostListDirectoryEntries200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you to get a list of directory entries
     * Get list of directory entries
     */
    async postListDirectoryEntries(requestParameters: PostListDirectoryEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostListDirectoryEntries200Response> {
        const response = await this.postListDirectoryEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you update a directory entry
     * Update directory entry
     */
    async postUpdateDirectoryEntryRaw(requestParameters: PostUpdateDirectoryEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling postUpdateDirectoryEntry().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postUpdateDirectoryEntry().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['silent'] != null) {
            queryParameters['silent'] = requestParameters['silent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/directory/{id}/entry/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DirectoryEntryRequestToJSON(requestParameters['directoryEntryRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method lets you update a directory entry
     * Update directory entry
     */
    async postUpdateDirectoryEntry(requestParameters: PostUpdateDirectoryEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postUpdateDirectoryEntryRaw(requestParameters, initOverrides);
    }

}
