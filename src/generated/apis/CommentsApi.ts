/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetCommentId200Response,
} from '../models/index';
import {
    GetCommentId200ResponseFromJSON,
    GetCommentId200ResponseToJSON,
} from '../models/index';

export interface DeleteCommentIdRequest {
    id: string;
}

export interface GetCommentIdRequest {
    id: string;
    fields?: string;
    sourceId?: string;
}

/**
 * 
 */
export class CommentsApi extends runtime.BaseAPI {

    /**
     * This method lets you delete a comment by number
     * Delete comment
     */
    async deleteCommentIdRaw(requestParameters: DeleteCommentIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteCommentId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/comment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method lets you delete a comment by number
     * Delete comment
     */
    async deleteCommentId(requestParameters: DeleteCommentIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCommentIdRaw(requestParameters, initOverrides);
    }

    /**
     * This method lets you get a comment by number
     * Get comment by number
     */
    async getCommentIdRaw(requestParameters: GetCommentIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommentId200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getCommentId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['sourceId'] != null) {
            queryParameters['sourceId'] = requestParameters['sourceId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/comment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCommentId200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a comment by number
     * Get comment by number
     */
    async getCommentId(requestParameters: GetCommentIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommentId200Response> {
        const response = await this.getCommentIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
