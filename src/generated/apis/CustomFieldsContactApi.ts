/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseError,
  CustomField,
  GetCustomfieldContact200Response,
  GetCustomfieldSetsContact200Response,
  PostContact201Response,
  ShortEntity,
} from '../models/index';
import {
    ApiResponseErrorFromJSON,
    ApiResponseErrorToJSON,
    CustomFieldFromJSON,
    CustomFieldToJSON,
    GetCustomfieldContact200ResponseFromJSON,
    GetCustomfieldContact200ResponseToJSON,
    GetCustomfieldSetsContact200ResponseFromJSON,
    GetCustomfieldSetsContact200ResponseToJSON,
    PostContact201ResponseFromJSON,
    PostContact201ResponseToJSON,
    ShortEntityFromJSON,
    ShortEntityToJSON,
} from '../models/index';

export interface GetCustomfieldContactRequest {
    fields?: string;
}

export interface GetCustomfieldsForContactRequest {
    id: string;
    fields?: string;
}

export interface PostCustomfieldAddRequest {
    customField?: CustomField;
}

export interface PostCustomfieldSetAddRequest {
    shortEntity?: ShortEntity;
}

/**
 * 
 */
export class CustomFieldsContactApi extends runtime.BaseAPI {

    /**
     * This method lets you get a list of custom contact and company fields
     * Get a list of a custom contact fields
     */
    async getCustomfieldContactRaw(requestParameters: GetCustomfieldContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCustomfieldContact200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customfield/contact`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCustomfieldContact200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of custom contact and company fields
     * Get a list of a custom contact fields
     */
    async getCustomfieldContact(requestParameters: GetCustomfieldContactRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCustomfieldContact200Response> {
        const response = await this.getCustomfieldContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of custom contact and company fields sets
     * Get a list of a custom contact fields set
     */
    async getCustomfieldSetsContactRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCustomfieldSetsContact200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customfield/group/contact`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCustomfieldSetsContact200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of custom contact and company fields sets
     * Get a list of a custom contact fields set
     */
    async getCustomfieldSetsContact(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCustomfieldSetsContact200Response> {
        const response = await this.getCustomfieldSetsContactRaw(initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of custom fields for contact or company
     * Get a list of a custom fields for contact
     */
    async getCustomfieldsForContactRaw(requestParameters: GetCustomfieldsForContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCustomfieldContact200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getCustomfieldsForContact().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customfield/contact/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCustomfieldContact200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of custom fields for contact or company
     * Get a list of a custom fields for contact
     */
    async getCustomfieldsForContact(requestParameters: GetCustomfieldsForContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCustomfieldContact200Response> {
        const response = await this.getCustomfieldsForContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you create a custom field for contact
     * Create a custom field for contact
     */
    async postCustomfieldAddRaw(requestParameters: PostCustomfieldAddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostContact201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customfield/contact/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomFieldToJSON(requestParameters['customField']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostContact201ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you create a custom field for contact
     * Create a custom field for contact
     */
    async postCustomfieldAdd(requestParameters: PostCustomfieldAddRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostContact201Response> {
        const response = await this.postCustomfieldAddRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you create a custom fields set for contact
     * Create a custom fields set for contact
     */
    async postCustomfieldSetAddRaw(requestParameters: PostCustomfieldSetAddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostContact201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customfield/group/contact/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShortEntityToJSON(requestParameters['shortEntity']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostContact201ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you create a custom fields set for contact
     * Create a custom fields set for contact
     */
    async postCustomfieldSetAdd(requestParameters: PostCustomfieldSetAddRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostContact201Response> {
        const response = await this.postCustomfieldSetAddRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
