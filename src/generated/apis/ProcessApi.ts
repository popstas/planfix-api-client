/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetContactProcessList200Response,
  GetTaskProcessList200Response,
  GetTaskStatusList200Response,
} from '../models/index';
import {
    GetContactProcessList200ResponseFromJSON,
    GetContactProcessList200ResponseToJSON,
    GetTaskProcessList200ResponseFromJSON,
    GetTaskProcessList200ResponseToJSON,
    GetTaskStatusList200ResponseFromJSON,
    GetTaskStatusList200ResponseToJSON,
} from '../models/index';

export interface GetContactProcessListRequest {
    fields?: string;
}

export interface GetTaskProcessListRequest {
    fields?: string;
}

export interface GetTaskStatusListRequest {
    id: number;
    fields?: string;
}

/**
 * 
 */
export class ProcessApi extends runtime.BaseAPI {

    /**
     * This method lets you get a list of contact processes
     * Get list of contact processes
     */
    async getContactProcessListRaw(requestParameters: GetContactProcessListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetContactProcessList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/process/contact`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContactProcessList200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of contact processes
     * Get list of contact processes
     */
    async getContactProcessList(requestParameters: GetContactProcessListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetContactProcessList200Response> {
        const response = await this.getContactProcessListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of task processes
     * Get list of task processes
     */
    async getTaskProcessListRaw(requestParameters: GetTaskProcessListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTaskProcessList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/process/task`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTaskProcessList200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of task processes
     * Get list of task processes
     */
    async getTaskProcessList(requestParameters: GetTaskProcessListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTaskProcessList200Response> {
        const response = await this.getTaskProcessListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of task statuses for process
     * Get list of task statuses for process
     */
    async getTaskStatusListRaw(requestParameters: GetTaskStatusListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTaskStatusList200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTaskStatusList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/process/task/{id}/statuses`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTaskStatusList200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of task statuses for process
     * Get list of task statuses for process
     */
    async getTaskStatusList(requestParameters: GetTaskStatusListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTaskStatusList200Response> {
        const response = await this.getTaskStatusListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
