/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseError,
  CheckGetReportSaveByRequestId200Response,
  GenerateReport201Response,
  GetReportId200Response,
  GetReportList200Response,
  GetReportListRequest,
  GetReportSaveList200Response,
  GetReportSaveListRequest,
  ReportSaveData,
} from '../models/index';
import {
    ApiResponseErrorFromJSON,
    ApiResponseErrorToJSON,
    CheckGetReportSaveByRequestId200ResponseFromJSON,
    CheckGetReportSaveByRequestId200ResponseToJSON,
    GenerateReport201ResponseFromJSON,
    GenerateReport201ResponseToJSON,
    GetReportId200ResponseFromJSON,
    GetReportId200ResponseToJSON,
    GetReportList200ResponseFromJSON,
    GetReportList200ResponseToJSON,
    GetReportListRequestFromJSON,
    GetReportListRequestToJSON,
    GetReportSaveList200ResponseFromJSON,
    GetReportSaveList200ResponseToJSON,
    GetReportSaveListRequestFromJSON,
    GetReportSaveListRequestToJSON,
    ReportSaveDataFromJSON,
    ReportSaveDataToJSON,
} from '../models/index';

export interface CheckGetReportSaveByRequestIdRequest {
    requestId: string;
}

export interface GenerateReportRequest {
    id: number;
}

export interface GetReportIdRequest {
    id: number;
    fields?: string;
}

export interface GetReportListOperationRequest {
    getReportListRequest?: GetReportListRequest;
}

export interface GetReportSaveDataRequest {
    id: number;
    saveId: number;
    chunk?: number;
}

export interface GetReportSaveListOperationRequest {
    id: number;
    getReportSaveListRequest?: GetReportSaveListRequest;
}

/**
 * 
 */
export class ReportApi extends runtime.BaseAPI {

    /**
     * This method allows you to check the status of a report generation request. If the report is completed, it also returns the saved report data.
     * Check report status and get saved report by request identifier
     */
    async checkGetReportSaveByRequestIdRaw(requestParameters: CheckGetReportSaveByRequestIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckGetReportSaveByRequestId200Response>> {
        if (requestParameters['requestId'] == null) {
            throw new runtime.RequiredError(
                'requestId',
                'Required parameter "requestId" was null or undefined when calling checkGetReportSaveByRequestId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/report/status/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters['requestId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckGetReportSaveByRequestId200ResponseFromJSON(jsonValue));
    }

    /**
     * This method allows you to check the status of a report generation request. If the report is completed, it also returns the saved report data.
     * Check report status and get saved report by request identifier
     */
    async checkGetReportSaveByRequestId(requestParameters: CheckGetReportSaveByRequestIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckGetReportSaveByRequestId200Response> {
        const response = await this.checkGetReportSaveByRequestIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you generate a report
     * Generate report
     */
    async generateReportRaw(requestParameters: GenerateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateReport201Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling generateReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/report/{id}/generate`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateReport201ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you generate a report
     * Generate report
     */
    async generateReport(requestParameters: GenerateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateReport201Response> {
        const response = await this.generateReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a report by its ID
     * Get report by identifier
     */
    async getReportIdRaw(requestParameters: GetReportIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReportId200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getReportId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/report/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetReportId200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a report by its ID
     * Get report by identifier
     */
    async getReportId(requestParameters: GetReportIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReportId200Response> {
        const response = await this.getReportIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of reports
     * Get list of reports
     */
    async getReportListRaw(requestParameters: GetReportListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReportList200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/report/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetReportListRequestToJSON(requestParameters['getReportListRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetReportList200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of reports
     * Get list of reports
     */
    async getReportList(requestParameters: GetReportListOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReportList200Response> {
        const response = await this.getReportListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get data from a saved report
     * Get data from saved report
     */
    async getReportSaveDataRaw(requestParameters: GetReportSaveDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportSaveData>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getReportSaveData().'
            );
        }

        if (requestParameters['saveId'] == null) {
            throw new runtime.RequiredError(
                'saveId',
                'Required parameter "saveId" was null or undefined when calling getReportSaveData().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chunk'] != null) {
            queryParameters['chunk'] = requestParameters['chunk'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/report/{id}/save/{saveId}/data`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"saveId"}}`, encodeURIComponent(String(requestParameters['saveId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportSaveDataFromJSON(jsonValue));
    }

    /**
     * This method lets you get data from a saved report
     * Get data from saved report
     */
    async getReportSaveData(requestParameters: GetReportSaveDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportSaveData> {
        const response = await this.getReportSaveDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method lets you get a list of saved reports
     * Get list of saved reports
     */
    async getReportSaveListRaw(requestParameters: GetReportSaveListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReportSaveList200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getReportSaveList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("rest_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/report/{id}/save/list`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetReportSaveListRequestToJSON(requestParameters['getReportSaveListRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetReportSaveList200ResponseFromJSON(jsonValue));
    }

    /**
     * This method lets you get a list of saved reports
     * Get list of saved reports
     */
    async getReportSaveList(requestParameters: GetReportSaveListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReportSaveList200Response> {
        const response = await this.getReportSaveListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
