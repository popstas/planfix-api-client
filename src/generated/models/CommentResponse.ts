/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FileResponse } from './FileResponse';
import {
    FileResponseFromJSON,
    FileResponseFromJSONTyped,
    FileResponseToJSON,
    FileResponseToJSONTyped,
} from './FileResponse';
import type { PeopleResponse } from './PeopleResponse';
import {
    PeopleResponseFromJSON,
    PeopleResponseFromJSONTyped,
    PeopleResponseToJSON,
    PeopleResponseToJSONTyped,
} from './PeopleResponse';
import type { Reminder } from './Reminder';
import {
    ReminderFromJSON,
    ReminderFromJSONTyped,
    ReminderToJSON,
    ReminderToJSONTyped,
} from './Reminder';
import type { BaseEntity } from './BaseEntity';
import {
    BaseEntityFromJSON,
    BaseEntityFromJSONTyped,
    BaseEntityToJSON,
    BaseEntityToJSONTyped,
} from './BaseEntity';
import type { CommentResponseChangeStatus } from './CommentResponseChangeStatus';
import {
    CommentResponseChangeStatusFromJSON,
    CommentResponseChangeStatusFromJSONTyped,
    CommentResponseChangeStatusToJSON,
    CommentResponseChangeStatusToJSONTyped,
} from './CommentResponseChangeStatus';
import type { TimePoint } from './TimePoint';
import {
    TimePointFromJSON,
    TimePointFromJSONTyped,
    TimePointToJSON,
    TimePointToJSONTyped,
} from './TimePoint';
import type { ChangeDate } from './ChangeDate';
import {
    ChangeDateFromJSON,
    ChangeDateFromJSONTyped,
    ChangeDateToJSON,
    ChangeDateToJSONTyped,
} from './ChangeDate';
import type { ContactResponseDataTagsInner } from './ContactResponseDataTagsInner';
import {
    ContactResponseDataTagsInnerFromJSON,
    ContactResponseDataTagsInnerFromJSONTyped,
    ContactResponseDataTagsInnerToJSON,
    ContactResponseDataTagsInnerToJSONTyped,
} from './ContactResponseDataTagsInner';
import type { PersonResponse } from './PersonResponse';
import {
    PersonResponseFromJSON,
    PersonResponseFromJSONTyped,
    PersonResponseToJSON,
    PersonResponseToJSONTyped,
} from './PersonResponse';

/**
 * 
 * @export
 * @interface CommentResponse
 */
export interface CommentResponse {
    /**
     * 
     * @type {number}
     * @memberof CommentResponse
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CommentResponse
     */
    sourceObjectId?: string;
    /**
     * 
     * @type {string}
     * @memberof CommentResponse
     */
    sourceDataVersion?: string;
    /**
     * 
     * @type {TimePoint}
     * @memberof CommentResponse
     */
    dateTime?: TimePoint;
    /**
     * 
     * @type {string}
     * @memberof CommentResponse
     */
    type?: CommentResponseTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CommentResponse
     */
    fromType?: CommentResponseFromTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CommentResponse
     */
    description?: string;
    /**
     * 
     * @type {BaseEntity}
     * @memberof CommentResponse
     */
    task?: BaseEntity;
    /**
     * 
     * @type {BaseEntity}
     * @memberof CommentResponse
     */
    project?: BaseEntity;
    /**
     * 
     * @type {PersonResponse}
     * @memberof CommentResponse
     */
    contact?: PersonResponse;
    /**
     * 
     * @type {PersonResponse}
     * @memberof CommentResponse
     */
    owner?: PersonResponse;
    /**
     * 
     * @type {boolean}
     * @memberof CommentResponse
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CommentResponse
     */
    isPinned?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CommentResponse
     */
    isHidden?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CommentResponse
     */
    isNotRead?: boolean;
    /**
     * 
     * @type {PeopleResponse}
     * @memberof CommentResponse
     */
    recipients?: PeopleResponse;
    /**
     * 
     * @type {Array<Reminder>}
     * @memberof CommentResponse
     */
    reminders?: Array<Reminder>;
    /**
     * 
     * @type {Array<ContactResponseDataTagsInner>}
     * @memberof CommentResponse
     */
    dataTags?: Array<ContactResponseDataTagsInner>;
    /**
     * 
     * @type {Array<FileResponse>}
     * @memberof CommentResponse
     */
    files?: Array<FileResponse>;
    /**
     * 
     * @type {ChangeDate}
     * @memberof CommentResponse
     */
    changeTaskStartDate?: ChangeDate;
    /**
     * 
     * @type {ChangeDate}
     * @memberof CommentResponse
     */
    changeTaskExpectDate?: ChangeDate;
    /**
     * 
     * @type {CommentResponseChangeStatus}
     * @memberof CommentResponse
     */
    changeStatus?: CommentResponseChangeStatus;
}


/**
 * @export
 */
export const CommentResponseTypeEnum = {
    Comment: 'Comment',
    Reminder: 'Reminder',
    None: 'None'
} as const;
export type CommentResponseTypeEnum = typeof CommentResponseTypeEnum[keyof typeof CommentResponseTypeEnum];

/**
 * @export
 */
export const CommentResponseFromTypeEnum = {
    Planfix: 'Planfix',
    Telegram: 'Telegram',
    Facebook: 'Facebook',
    Viber: 'Viber',
    WhatsApp: 'WhatsApp',
    Mobile: 'Mobile',
    Email: 'Email',
    Charta: 'Charta',
    Skype: 'Skype',
    YandexChat: 'YandexChat',
    Avito: 'Avito',
    WebChatApi: 'WebChatApi',
    None: 'None'
} as const;
export type CommentResponseFromTypeEnum = typeof CommentResponseFromTypeEnum[keyof typeof CommentResponseFromTypeEnum];


/**
 * Check if a given object implements the CommentResponse interface.
 */
export function instanceOfCommentResponse(value: object): value is CommentResponse {
    return true;
}

export function CommentResponseFromJSON(json: any): CommentResponse {
    return CommentResponseFromJSONTyped(json, false);
}

export function CommentResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommentResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'sourceObjectId': json['sourceObjectId'] == null ? undefined : json['sourceObjectId'],
        'sourceDataVersion': json['sourceDataVersion'] == null ? undefined : json['sourceDataVersion'],
        'dateTime': json['dateTime'] == null ? undefined : TimePointFromJSON(json['dateTime']),
        'type': json['type'] == null ? undefined : json['type'],
        'fromType': json['fromType'] == null ? undefined : json['fromType'],
        'description': json['description'] == null ? undefined : json['description'],
        'task': json['task'] == null ? undefined : BaseEntityFromJSON(json['task']),
        'project': json['project'] == null ? undefined : BaseEntityFromJSON(json['project']),
        'contact': json['contact'] == null ? undefined : PersonResponseFromJSON(json['contact']),
        'owner': json['owner'] == null ? undefined : PersonResponseFromJSON(json['owner']),
        'isDeleted': json['isDeleted'] == null ? undefined : json['isDeleted'],
        'isPinned': json['isPinned'] == null ? undefined : json['isPinned'],
        'isHidden': json['isHidden'] == null ? undefined : json['isHidden'],
        'isNotRead': json['isNotRead'] == null ? undefined : json['isNotRead'],
        'recipients': json['recipients'] == null ? undefined : PeopleResponseFromJSON(json['recipients']),
        'reminders': json['reminders'] == null ? undefined : ((json['reminders'] as Array<any>).map(ReminderFromJSON)),
        'dataTags': json['dataTags'] == null ? undefined : ((json['dataTags'] as Array<any>).map(ContactResponseDataTagsInnerFromJSON)),
        'files': json['files'] == null ? undefined : ((json['files'] as Array<any>).map(FileResponseFromJSON)),
        'changeTaskStartDate': json['changeTaskStartDate'] == null ? undefined : ChangeDateFromJSON(json['changeTaskStartDate']),
        'changeTaskExpectDate': json['changeTaskExpectDate'] == null ? undefined : ChangeDateFromJSON(json['changeTaskExpectDate']),
        'changeStatus': json['changeStatus'] == null ? undefined : CommentResponseChangeStatusFromJSON(json['changeStatus']),
    };
}

export function CommentResponseToJSON(json: any): CommentResponse {
    return CommentResponseToJSONTyped(json, false);
}

export function CommentResponseToJSONTyped(value?: CommentResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'sourceObjectId': value['sourceObjectId'],
        'sourceDataVersion': value['sourceDataVersion'],
        'dateTime': TimePointToJSON(value['dateTime']),
        'type': value['type'],
        'fromType': value['fromType'],
        'description': value['description'],
        'task': BaseEntityToJSON(value['task']),
        'project': BaseEntityToJSON(value['project']),
        'contact': PersonResponseToJSON(value['contact']),
        'owner': PersonResponseToJSON(value['owner']),
        'isDeleted': value['isDeleted'],
        'isPinned': value['isPinned'],
        'isHidden': value['isHidden'],
        'isNotRead': value['isNotRead'],
        'recipients': PeopleResponseToJSON(value['recipients']),
        'reminders': value['reminders'] == null ? undefined : ((value['reminders'] as Array<any>).map(ReminderToJSON)),
        'dataTags': value['dataTags'] == null ? undefined : ((value['dataTags'] as Array<any>).map(ContactResponseDataTagsInnerToJSON)),
        'files': value['files'] == null ? undefined : ((value['files'] as Array<any>).map(FileResponseToJSON)),
        'changeTaskStartDate': ChangeDateToJSON(value['changeTaskStartDate']),
        'changeTaskExpectDate': ChangeDateToJSON(value['changeTaskExpectDate']),
        'changeStatus': CommentResponseChangeStatusToJSON(value['changeStatus']),
    };
}

