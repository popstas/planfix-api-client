/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PeopleResponse } from './PeopleResponse';
import {
    PeopleResponseFromJSON,
    PeopleResponseFromJSONTyped,
    PeopleResponseToJSON,
    PeopleResponseToJSONTyped,
} from './PeopleResponse';
import type { CustomFieldValueResponse } from './CustomFieldValueResponse';
import {
    CustomFieldValueResponseFromJSON,
    CustomFieldValueResponseFromJSONTyped,
    CustomFieldValueResponseToJSON,
    CustomFieldValueResponseToJSONTyped,
} from './CustomFieldValueResponse';
import type { BaseEntity } from './BaseEntity';
import {
    BaseEntityFromJSON,
    BaseEntityFromJSONTyped,
    BaseEntityToJSON,
    BaseEntityToJSONTyped,
} from './BaseEntity';
import type { TimePoint } from './TimePoint';
import {
    TimePointFromJSON,
    TimePointFromJSONTyped,
    TimePointToJSON,
    TimePointToJSONTyped,
} from './TimePoint';
import type { GroupResponse } from './GroupResponse';
import {
    GroupResponseFromJSON,
    GroupResponseFromJSONTyped,
    GroupResponseToJSON,
    GroupResponseToJSONTyped,
} from './GroupResponse';
import type { PersonResponse } from './PersonResponse';
import {
    PersonResponseFromJSON,
    PersonResponseFromJSONTyped,
    PersonResponseToJSON,
    PersonResponseToJSONTyped,
} from './PersonResponse';

/**
 * 
 * @export
 * @interface ProjectResponse
 */
export interface ProjectResponse {
    /**
     * 
     * @type {number}
     * @memberof ProjectResponse
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectResponse
     */
    sourceObjectId?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectResponse
     */
    sourceDataVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectResponse
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectResponse
     */
    description?: string;
    /**
     * 
     * @type {BaseEntity}
     * @memberof ProjectResponse
     */
    status?: BaseEntity;
    /**
     * 
     * @type {PersonResponse}
     * @memberof ProjectResponse
     */
    owner?: PersonResponse;
    /**
     * 
     * @type {BaseEntity}
     * @memberof ProjectResponse
     */
    parent?: BaseEntity;
    /**
     * 
     * @type {BaseEntity}
     * @memberof ProjectResponse
     */
    template?: BaseEntity;
    /**
     * 
     * @type {GroupResponse}
     * @memberof ProjectResponse
     */
    group?: GroupResponse;
    /**
     * 
     * @type {PersonResponse}
     * @memberof ProjectResponse
     */
    counterparty?: PersonResponse;
    /**
     * 
     * @type {TimePoint}
     * @memberof ProjectResponse
     */
    startDate?: TimePoint;
    /**
     * 
     * @type {TimePoint}
     * @memberof ProjectResponse
     */
    endDate?: TimePoint;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectResponse
     */
    hasEndDate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectResponse
     */
    hiddenForEmployees?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectResponse
     */
    hiddenForClients?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectResponse
     */
    overdue?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectResponse
     */
    isCloseToDeadline?: boolean;
    /**
     * 
     * @type {PeopleResponse}
     * @memberof ProjectResponse
     */
    assignees?: PeopleResponse;
    /**
     * 
     * @type {PeopleResponse}
     * @memberof ProjectResponse
     */
    participants?: PeopleResponse;
    /**
     * 
     * @type {PeopleResponse}
     * @memberof ProjectResponse
     */
    auditors?: PeopleResponse;
    /**
     * 
     * @type {PeopleResponse}
     * @memberof ProjectResponse
     */
    clientManagers?: PeopleResponse;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectResponse
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {Array<CustomFieldValueResponse>}
     * @memberof ProjectResponse
     */
    customFieldData?: Array<CustomFieldValueResponse>;
}

/**
 * Check if a given object implements the ProjectResponse interface.
 */
export function instanceOfProjectResponse(value: object): value is ProjectResponse {
    return true;
}

export function ProjectResponseFromJSON(json: any): ProjectResponse {
    return ProjectResponseFromJSONTyped(json, false);
}

export function ProjectResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'sourceObjectId': json['sourceObjectId'] == null ? undefined : json['sourceObjectId'],
        'sourceDataVersion': json['sourceDataVersion'] == null ? undefined : json['sourceDataVersion'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'status': json['status'] == null ? undefined : BaseEntityFromJSON(json['status']),
        'owner': json['owner'] == null ? undefined : PersonResponseFromJSON(json['owner']),
        'parent': json['parent'] == null ? undefined : BaseEntityFromJSON(json['parent']),
        'template': json['template'] == null ? undefined : BaseEntityFromJSON(json['template']),
        'group': json['group'] == null ? undefined : GroupResponseFromJSON(json['group']),
        'counterparty': json['counterparty'] == null ? undefined : PersonResponseFromJSON(json['counterparty']),
        'startDate': json['startDate'] == null ? undefined : TimePointFromJSON(json['startDate']),
        'endDate': json['endDate'] == null ? undefined : TimePointFromJSON(json['endDate']),
        'hasEndDate': json['hasEndDate'] == null ? undefined : json['hasEndDate'],
        'hiddenForEmployees': json['hiddenForEmployees'] == null ? undefined : json['hiddenForEmployees'],
        'hiddenForClients': json['hiddenForClients'] == null ? undefined : json['hiddenForClients'],
        'overdue': json['overdue'] == null ? undefined : json['overdue'],
        'isCloseToDeadline': json['isCloseToDeadline'] == null ? undefined : json['isCloseToDeadline'],
        'assignees': json['assignees'] == null ? undefined : PeopleResponseFromJSON(json['assignees']),
        'participants': json['participants'] == null ? undefined : PeopleResponseFromJSON(json['participants']),
        'auditors': json['auditors'] == null ? undefined : PeopleResponseFromJSON(json['auditors']),
        'clientManagers': json['clientManagers'] == null ? undefined : PeopleResponseFromJSON(json['clientManagers']),
        'isDeleted': json['isDeleted'] == null ? undefined : json['isDeleted'],
        'customFieldData': json['customFieldData'] == null ? undefined : ((json['customFieldData'] as Array<any>).map(CustomFieldValueResponseFromJSON)),
    };
}

export function ProjectResponseToJSON(json: any): ProjectResponse {
    return ProjectResponseToJSONTyped(json, false);
}

export function ProjectResponseToJSONTyped(value?: ProjectResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'sourceObjectId': value['sourceObjectId'],
        'sourceDataVersion': value['sourceDataVersion'],
        'name': value['name'],
        'description': value['description'],
        'status': BaseEntityToJSON(value['status']),
        'owner': PersonResponseToJSON(value['owner']),
        'parent': BaseEntityToJSON(value['parent']),
        'template': BaseEntityToJSON(value['template']),
        'group': GroupResponseToJSON(value['group']),
        'counterparty': PersonResponseToJSON(value['counterparty']),
        'startDate': TimePointToJSON(value['startDate']),
        'endDate': TimePointToJSON(value['endDate']),
        'hasEndDate': value['hasEndDate'],
        'hiddenForEmployees': value['hiddenForEmployees'],
        'hiddenForClients': value['hiddenForClients'],
        'overdue': value['overdue'],
        'isCloseToDeadline': value['isCloseToDeadline'],
        'assignees': PeopleResponseToJSON(value['assignees']),
        'participants': PeopleResponseToJSON(value['participants']),
        'auditors': PeopleResponseToJSON(value['auditors']),
        'clientManagers': PeopleResponseToJSON(value['clientManagers']),
        'isDeleted': value['isDeleted'],
        'customFieldData': value['customFieldData'] == null ? undefined : ((value['customFieldData'] as Array<any>).map(CustomFieldValueResponseToJSON)),
    };
}

