/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Complex directory filters, <a target="blank" href="https://planfix.com/ru/help/REST_API:_%D0%A1%D0%BB%D0%BE%D0%B6%D0%BD%D1%8B%D0%B5_%D1%84%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B_%D1%81%D0%BF%D1%80%D0%B0%D0%B2%D0%BE%D1%87%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2"> more information</a>
 * @export
 * @interface ComplexDirectoryFilter
 */
export interface ComplexDirectoryFilter {
    /**
     * 
     * @type {number}
     * @memberof ComplexDirectoryFilter
     */
    type: ComplexDirectoryFilterTypeEnum | null;
    /**
     * 
     * @type {number}
     * @memberof ComplexDirectoryFilter
     */
    field: number;
    /**
     * 
     * @type {string}
     * @memberof ComplexDirectoryFilter
     */
    operator: ComplexDirectoryFilterOperatorEnum;
    /**
     * 
     * @type {}
     * @memberof ComplexDirectoryFilter
     */
    value:  | null;
}


/**
 * @export
 */
export const ComplexDirectoryFilterTypeEnum = {
} as const;
export type ComplexDirectoryFilterTypeEnum = typeof ComplexDirectoryFilterTypeEnum[keyof typeof ComplexDirectoryFilterTypeEnum];

/**
 * @export
 */
export const ComplexDirectoryFilterOperatorEnum = {
    Equal: 'equal',
    Notequal: 'notequal',
    Gt: 'gt',
    Lt: 'lt'
} as const;
export type ComplexDirectoryFilterOperatorEnum = typeof ComplexDirectoryFilterOperatorEnum[keyof typeof ComplexDirectoryFilterOperatorEnum];


/**
 * Check if a given object implements the ComplexDirectoryFilter interface.
 */
export function instanceOfComplexDirectoryFilter(value: object): value is ComplexDirectoryFilter {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('field' in value) || value['field'] === undefined) return false;
    if (!('operator' in value) || value['operator'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    return true;
}

export function ComplexDirectoryFilterFromJSON(json: any): ComplexDirectoryFilter {
    return ComplexDirectoryFilterFromJSONTyped(json, false);
}

export function ComplexDirectoryFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComplexDirectoryFilter {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'field': json['field'],
        'operator': json['operator'],
        'value': FromJSON(json['value']),
    };
}

export function ComplexDirectoryFilterToJSON(json: any): ComplexDirectoryFilter {
    return ComplexDirectoryFilterToJSONTyped(json, false);
}

export function ComplexDirectoryFilterToJSONTyped(value?: ComplexDirectoryFilter | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'field': value['field'],
        'operator': value['operator'],
        'value': ToJSON(value['value']),
    };
}

