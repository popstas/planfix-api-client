/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ComplexDirectoryFilter } from './ComplexDirectoryFilter';
import {
    ComplexDirectoryFilterFromJSON,
    ComplexDirectoryFilterFromJSONTyped,
    ComplexDirectoryFilterToJSON,
    ComplexDirectoryFilterToJSONTyped,
} from './ComplexDirectoryFilter';

/**
 * 
 * @export
 * @interface PostListDirectoryEntriesRequest
 */
export interface PostListDirectoryEntriesRequest {
    /**
     * Offset from beginning of list
     * @type {number}
     * @memberof PostListDirectoryEntriesRequest
     */
    offset?: number;
    /**
     * Size of requested list
     * @type {number}
     * @memberof PostListDirectoryEntriesRequest
     */
    pageSize?: number;
    /**
     * Fields returned - names, comma-delimited
     * @type {string}
     * @memberof PostListDirectoryEntriesRequest
     */
    fields?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PostListDirectoryEntriesRequest
     */
    groupsOnly?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PostListDirectoryEntriesRequest
     */
    entriesOnly?: boolean;
    /**
     * Id for directory entries filter, get list by method '/directory/{id}/filters'
     * @type {string}
     * @memberof PostListDirectoryEntriesRequest
     */
    filterId?: string;
    /**
     * 
     * @type {Array<ComplexDirectoryFilter>}
     * @memberof PostListDirectoryEntriesRequest
     */
    filters?: Array<ComplexDirectoryFilter>;
}

/**
 * Check if a given object implements the PostListDirectoryEntriesRequest interface.
 */
export function instanceOfPostListDirectoryEntriesRequest(value: object): value is PostListDirectoryEntriesRequest {
    return true;
}

export function PostListDirectoryEntriesRequestFromJSON(json: any): PostListDirectoryEntriesRequest {
    return PostListDirectoryEntriesRequestFromJSONTyped(json, false);
}

export function PostListDirectoryEntriesRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostListDirectoryEntriesRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'offset': json['offset'] == null ? undefined : json['offset'],
        'pageSize': json['pageSize'] == null ? undefined : json['pageSize'],
        'fields': json['fields'] == null ? undefined : json['fields'],
        'groupsOnly': json['groupsOnly'] == null ? undefined : json['groupsOnly'],
        'entriesOnly': json['entriesOnly'] == null ? undefined : json['entriesOnly'],
        'filterId': json['filterId'] == null ? undefined : json['filterId'],
        'filters': json['filters'] == null ? undefined : ((json['filters'] as Array<any>).map(ComplexDirectoryFilterFromJSON)),
    };
}

export function PostListDirectoryEntriesRequestToJSON(json: any): PostListDirectoryEntriesRequest {
    return PostListDirectoryEntriesRequestToJSONTyped(json, false);
}

export function PostListDirectoryEntriesRequestToJSONTyped(value?: PostListDirectoryEntriesRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'offset': value['offset'],
        'pageSize': value['pageSize'],
        'fields': value['fields'],
        'groupsOnly': value['groupsOnly'],
        'entriesOnly': value['entriesOnly'],
        'filterId': value['filterId'],
        'filters': value['filters'] == null ? undefined : ((value['filters'] as Array<any>).map(ComplexDirectoryFilterToJSON)),
    };
}

