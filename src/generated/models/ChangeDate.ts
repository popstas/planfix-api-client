/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TimePoint } from './TimePoint';
import {
    TimePointFromJSON,
    TimePointFromJSONTyped,
    TimePointToJSON,
    TimePointToJSONTyped,
} from './TimePoint';

/**
 * 
 * @export
 * @interface ChangeDate
 */
export interface ChangeDate {
    /**
     * 
     * @type {TimePoint}
     * @memberof ChangeDate
     */
    oldDateTime?: TimePoint;
    /**
     * 
     * @type {TimePoint}
     * @memberof ChangeDate
     */
    newDateTime?: TimePoint;
    /**
     * 
     * @type {boolean}
     * @memberof ChangeDate
     */
    hasOldDate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChangeDate
     */
    hasNewDate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChangeDate
     */
    hasOldTime?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChangeDate
     */
    hasNewTime?: boolean;
}

/**
 * Check if a given object implements the ChangeDate interface.
 */
export function instanceOfChangeDate(value: object): value is ChangeDate {
    return true;
}

export function ChangeDateFromJSON(json: any): ChangeDate {
    return ChangeDateFromJSONTyped(json, false);
}

export function ChangeDateFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChangeDate {
    if (json == null) {
        return json;
    }
    return {
        
        'oldDateTime': json['oldDateTime'] == null ? undefined : TimePointFromJSON(json['oldDateTime']),
        'newDateTime': json['newDateTime'] == null ? undefined : TimePointFromJSON(json['newDateTime']),
        'hasOldDate': json['hasOldDate'] == null ? undefined : json['hasOldDate'],
        'hasNewDate': json['hasNewDate'] == null ? undefined : json['hasNewDate'],
        'hasOldTime': json['hasOldTime'] == null ? undefined : json['hasOldTime'],
        'hasNewTime': json['hasNewTime'] == null ? undefined : json['hasNewTime'],
    };
}

export function ChangeDateToJSON(json: any): ChangeDate {
    return ChangeDateToJSONTyped(json, false);
}

export function ChangeDateToJSONTyped(value?: ChangeDate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'oldDateTime': TimePointToJSON(value['oldDateTime']),
        'newDateTime': TimePointToJSON(value['newDateTime']),
        'hasOldDate': value['hasOldDate'],
        'hasNewDate': value['hasNewDate'],
        'hasOldTime': value['hasOldTime'],
        'hasNewTime': value['hasNewTime'],
    };
}

