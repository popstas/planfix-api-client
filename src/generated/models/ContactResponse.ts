/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FileResponse } from './FileResponse';
import {
    FileResponseFromJSON,
    FileResponseFromJSONTyped,
    FileResponseToJSON,
    FileResponseToJSONTyped,
} from './FileResponse';
import type { PeopleResponse } from './PeopleResponse';
import {
    PeopleResponseFromJSON,
    PeopleResponseFromJSONTyped,
    PeopleResponseToJSON,
    PeopleResponseToJSONTyped,
} from './PeopleResponse';
import type { CompanyEntity } from './CompanyEntity';
import {
    CompanyEntityFromJSON,
    CompanyEntityFromJSONTyped,
    CompanyEntityToJSON,
    CompanyEntityToJSONTyped,
} from './CompanyEntity';
import type { CustomFieldValueResponse } from './CustomFieldValueResponse';
import {
    CustomFieldValueResponseFromJSON,
    CustomFieldValueResponseFromJSONTyped,
    CustomFieldValueResponseToJSON,
    CustomFieldValueResponseToJSONTyped,
} from './CustomFieldValueResponse';
import type { BaseEntity } from './BaseEntity';
import {
    BaseEntityFromJSON,
    BaseEntityFromJSONTyped,
    BaseEntityToJSON,
    BaseEntityToJSONTyped,
} from './BaseEntity';
import type { TimePoint } from './TimePoint';
import {
    TimePointFromJSON,
    TimePointFromJSONTyped,
    TimePointToJSON,
    TimePointToJSONTyped,
} from './TimePoint';
import type { PhoneResponse } from './PhoneResponse';
import {
    PhoneResponseFromJSON,
    PhoneResponseFromJSONTyped,
    PhoneResponseToJSON,
    PhoneResponseToJSONTyped,
} from './PhoneResponse';
import type { ContactResponseDataTagsInner } from './ContactResponseDataTagsInner';
import {
    ContactResponseDataTagsInnerFromJSON,
    ContactResponseDataTagsInnerFromJSONTyped,
    ContactResponseDataTagsInnerToJSON,
    ContactResponseDataTagsInnerToJSONTyped,
} from './ContactResponseDataTagsInner';
import type { GroupResponse } from './GroupResponse';
import {
    GroupResponseFromJSON,
    GroupResponseFromJSONTyped,
    GroupResponseToJSON,
    GroupResponseToJSONTyped,
} from './GroupResponse';
import type { PersonResponse } from './PersonResponse';
import {
    PersonResponseFromJSON,
    PersonResponseFromJSONTyped,
    PersonResponseToJSON,
    PersonResponseToJSONTyped,
} from './PersonResponse';

/**
 * 
 * @export
 * @interface ContactResponse
 */
export interface ContactResponse {
    /**
     * 
     * @type {number}
     * @memberof ContactResponse
     */
    id?: number;
    /**
     * 
     * @type {BaseEntity}
     * @memberof ContactResponse
     */
    template?: BaseEntity;
    /**
     * 
     * @type {number}
     * @memberof ContactResponse
     */
    processId?: number;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    sourceObjectId?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    sourceDataVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    midname?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    lastname?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    gender?: ContactResponseGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    site?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    email?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ContactResponse
     */
    additionalEmailAddresses?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    skype?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    telegramId?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    telegram?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    facebook?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    instagram?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    vk?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    position?: string;
    /**
     * 
     * @type {GroupResponse}
     * @memberof ContactResponse
     */
    group?: GroupResponse;
    /**
     * 
     * @type {boolean}
     * @memberof ContactResponse
     */
    isCompany?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ContactResponse
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {TimePoint}
     * @memberof ContactResponse
     */
    birthDate?: TimePoint;
    /**
     * 
     * @type {TimePoint}
     * @memberof ContactResponse
     */
    createdDate?: TimePoint;
    /**
     * 
     * @type {TimePoint}
     * @memberof ContactResponse
     */
    dateOfLastUpdate?: TimePoint;
    /**
     * 
     * @type {PeopleResponse}
     * @memberof ContactResponse
     */
    supervisors?: PeopleResponse;
    /**
     * 
     * @type {Array<PhoneResponse>}
     * @memberof ContactResponse
     */
    phones?: Array<PhoneResponse>;
    /**
     * 
     * @type {Array<CompanyEntity>}
     * @memberof ContactResponse
     */
    companies?: Array<CompanyEntity>;
    /**
     * 
     * @type {Array<PersonResponse>}
     * @memberof ContactResponse
     */
    contacts?: Array<PersonResponse>;
    /**
     * 
     * @type {Array<CustomFieldValueResponse>}
     * @memberof ContactResponse
     */
    customFieldData?: Array<CustomFieldValueResponse>;
    /**
     * 
     * @type {Array<FileResponse>}
     * @memberof ContactResponse
     */
    files?: Array<FileResponse>;
    /**
     * 
     * @type {Array<ContactResponseDataTagsInner>}
     * @memberof ContactResponse
     */
    dataTags?: Array<ContactResponseDataTagsInner>;
}


/**
 * @export
 */
export const ContactResponseGenderEnum = {
    NotDefined: 'NotDefined',
    Female: 'Female',
    Male: 'Male'
} as const;
export type ContactResponseGenderEnum = typeof ContactResponseGenderEnum[keyof typeof ContactResponseGenderEnum];


/**
 * Check if a given object implements the ContactResponse interface.
 */
export function instanceOfContactResponse(value: object): value is ContactResponse {
    return true;
}

export function ContactResponseFromJSON(json: any): ContactResponse {
    return ContactResponseFromJSONTyped(json, false);
}

export function ContactResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContactResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'template': json['template'] == null ? undefined : BaseEntityFromJSON(json['template']),
        'processId': json['processId'] == null ? undefined : json['processId'],
        'sourceObjectId': json['sourceObjectId'] == null ? undefined : json['sourceObjectId'],
        'sourceDataVersion': json['sourceDataVersion'] == null ? undefined : json['sourceDataVersion'],
        'name': json['name'] == null ? undefined : json['name'],
        'midname': json['midname'] == null ? undefined : json['midname'],
        'lastname': json['lastname'] == null ? undefined : json['lastname'],
        'gender': json['gender'] == null ? undefined : json['gender'],
        'description': json['description'] == null ? undefined : json['description'],
        'address': json['address'] == null ? undefined : json['address'],
        'site': json['site'] == null ? undefined : json['site'],
        'email': json['email'] == null ? undefined : json['email'],
        'additionalEmailAddresses': json['additionalEmailAddresses'] == null ? undefined : json['additionalEmailAddresses'],
        'skype': json['skype'] == null ? undefined : json['skype'],
        'telegramId': json['telegramId'] == null ? undefined : json['telegramId'],
        'telegram': json['telegram'] == null ? undefined : json['telegram'],
        'facebook': json['facebook'] == null ? undefined : json['facebook'],
        'instagram': json['instagram'] == null ? undefined : json['instagram'],
        'vk': json['vk'] == null ? undefined : json['vk'],
        'position': json['position'] == null ? undefined : json['position'],
        'group': json['group'] == null ? undefined : GroupResponseFromJSON(json['group']),
        'isCompany': json['isCompany'] == null ? undefined : json['isCompany'],
        'isDeleted': json['isDeleted'] == null ? undefined : json['isDeleted'],
        'birthDate': json['birthDate'] == null ? undefined : TimePointFromJSON(json['birthDate']),
        'createdDate': json['createdDate'] == null ? undefined : TimePointFromJSON(json['createdDate']),
        'dateOfLastUpdate': json['dateOfLastUpdate'] == null ? undefined : TimePointFromJSON(json['dateOfLastUpdate']),
        'supervisors': json['supervisors'] == null ? undefined : PeopleResponseFromJSON(json['supervisors']),
        'phones': json['phones'] == null ? undefined : ((json['phones'] as Array<any>).map(PhoneResponseFromJSON)),
        'companies': json['companies'] == null ? undefined : ((json['companies'] as Array<any>).map(CompanyEntityFromJSON)),
        'contacts': json['contacts'] == null ? undefined : ((json['contacts'] as Array<any>).map(PersonResponseFromJSON)),
        'customFieldData': json['customFieldData'] == null ? undefined : ((json['customFieldData'] as Array<any>).map(CustomFieldValueResponseFromJSON)),
        'files': json['files'] == null ? undefined : ((json['files'] as Array<any>).map(FileResponseFromJSON)),
        'dataTags': json['dataTags'] == null ? undefined : ((json['dataTags'] as Array<any>).map(ContactResponseDataTagsInnerFromJSON)),
    };
}

export function ContactResponseToJSON(json: any): ContactResponse {
    return ContactResponseToJSONTyped(json, false);
}

export function ContactResponseToJSONTyped(value?: ContactResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'template': BaseEntityToJSON(value['template']),
        'processId': value['processId'],
        'sourceObjectId': value['sourceObjectId'],
        'sourceDataVersion': value['sourceDataVersion'],
        'name': value['name'],
        'midname': value['midname'],
        'lastname': value['lastname'],
        'gender': value['gender'],
        'description': value['description'],
        'address': value['address'],
        'site': value['site'],
        'email': value['email'],
        'additionalEmailAddresses': value['additionalEmailAddresses'],
        'skype': value['skype'],
        'telegramId': value['telegramId'],
        'telegram': value['telegram'],
        'facebook': value['facebook'],
        'instagram': value['instagram'],
        'vk': value['vk'],
        'position': value['position'],
        'group': GroupResponseToJSON(value['group']),
        'isCompany': value['isCompany'],
        'isDeleted': value['isDeleted'],
        'birthDate': TimePointToJSON(value['birthDate']),
        'createdDate': TimePointToJSON(value['createdDate']),
        'dateOfLastUpdate': TimePointToJSON(value['dateOfLastUpdate']),
        'supervisors': PeopleResponseToJSON(value['supervisors']),
        'phones': value['phones'] == null ? undefined : ((value['phones'] as Array<any>).map(PhoneResponseToJSON)),
        'companies': value['companies'] == null ? undefined : ((value['companies'] as Array<any>).map(CompanyEntityToJSON)),
        'contacts': value['contacts'] == null ? undefined : ((value['contacts'] as Array<any>).map(PersonResponseToJSON)),
        'customFieldData': value['customFieldData'] == null ? undefined : ((value['customFieldData'] as Array<any>).map(CustomFieldValueResponseToJSON)),
        'files': value['files'] == null ? undefined : ((value['files'] as Array<any>).map(FileResponseToJSON)),
        'dataTags': value['dataTags'] == null ? undefined : ((value['dataTags'] as Array<any>).map(ContactResponseDataTagsInnerToJSON)),
    };
}

