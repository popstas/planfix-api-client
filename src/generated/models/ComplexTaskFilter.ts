/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ComplexTaskFilterSubfilter } from './ComplexTaskFilterSubfilter';
import {
    ComplexTaskFilterSubfilterFromJSON,
    ComplexTaskFilterSubfilterFromJSONTyped,
    ComplexTaskFilterSubfilterToJSON,
    ComplexTaskFilterSubfilterToJSONTyped,
} from './ComplexTaskFilterSubfilter';

/**
 * Complex task filters, <a target="blank" href="https://planfix.com/ru/help/REST_API:_%D0%A1%D0%BB%D0%BE%D0%B6%D0%BD%D1%8B%D0%B5_%D1%84%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B_%D0%B7%D0%B0%D0%B4%D0%B0%D1%87"> more information</a>
 * @export
 * @interface ComplexTaskFilter
 */
export interface ComplexTaskFilter {
    /**
     * 
     * @type {number}
     * @memberof ComplexTaskFilter
     */
    type: ComplexTaskFilterTypeEnum | null;
    /**
     * 
     * @type {string}
     * @memberof ComplexTaskFilter
     */
    operator: ComplexTaskFilterOperatorEnum;
    /**
     * 
     * @type {}
     * @memberof ComplexTaskFilter
     */
    value: number | string | null | number[];
    /**
     * 
     * @type {number}
     * @memberof ComplexTaskFilter
     */
    field?: number;
    /**
     * 
     * @type {ComplexTaskFilterSubfilter}
     * @memberof ComplexTaskFilter
     */
    subfilter?: ComplexTaskFilterSubfilter;
}


/**
 * @export
 */
export const ComplexTaskFilterTypeEnum = {
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12,
    NUMBER_13: 13,
    NUMBER_14: 14,
    NUMBER_16: 16,
    NUMBER_17: 17,
    NUMBER_18: 18,
    NUMBER_19: 19,
    NUMBER_20: 20,
    NUMBER_21: 21,
    NUMBER_22: 22,
    NUMBER_23: 23,
    NUMBER_24: 24,
    NUMBER_25: 25,
    NUMBER_26: 26,
    NUMBER_28: 28,
    NUMBER_29: 29,
    NUMBER_33: 33,
    NUMBER_34: 34,
    NUMBER_35: 35,
    NUMBER_38: 38,
    NUMBER_39: 39,
    NUMBER_41: 41,
    NUMBER_51: 51,
    NUMBER_59: 59,
    NUMBER_60: 60,
    NUMBER_69: 69,
    NUMBER_70: 70,
    NUMBER_71: 71,
    NUMBER_72: 72,
    NUMBER_73: 73,
    NUMBER_79: 79,
    NUMBER_93: 93,
    NUMBER_101: 101,
    NUMBER_102: 102,
    NUMBER_103: 103,
    NUMBER_105: 105,
    NUMBER_106: 106,
    NUMBER_107: 107,
    NUMBER_108: 108,
    NUMBER_109: 109,
    NUMBER_112: 112,
    NUMBER_113: 113,
    NUMBER_114: 114,
    NUMBER_152: 152,
    NUMBER_153: 153
} as const;
export type ComplexTaskFilterTypeEnum = typeof ComplexTaskFilterTypeEnum[keyof typeof ComplexTaskFilterTypeEnum];

/**
 * @export
 */
export const ComplexTaskFilterOperatorEnum = {
    Equal: 'equal',
    Notequal: 'notequal',
    Gt: 'gt',
    Lt: 'lt'
} as const;
export type ComplexTaskFilterOperatorEnum = typeof ComplexTaskFilterOperatorEnum[keyof typeof ComplexTaskFilterOperatorEnum];


/**
 * Check if a given object implements the ComplexTaskFilter interface.
 */
export function instanceOfComplexTaskFilter(value: object): value is ComplexTaskFilter {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('operator' in value) || value['operator'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    return true;
}

export function ComplexTaskFilterFromJSON(json: any): ComplexTaskFilter {
    return ComplexTaskFilterFromJSONTyped(json, false);
}

export function ComplexTaskFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComplexTaskFilter {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'operator': json['operator'],
        'value': json['value'],
        'field': json['field'] == null ? undefined : json['field'],
        'subfilter': json['subfilter'] == null ? undefined : ComplexTaskFilterSubfilterFromJSON(json['subfilter']),
    };
}

export function ComplexTaskFilterToJSON(json: any): ComplexTaskFilter {
    return ComplexTaskFilterToJSONTyped(json, false);
}

export function ComplexTaskFilterToJSONTyped(value?: ComplexTaskFilter | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'operator': value['operator'],
        'value': value['value'],
        'field': value['field'],
        'subfilter': ComplexTaskFilterSubfilterToJSON(value['subfilter']),
    };
}

