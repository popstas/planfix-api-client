/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GroupRequest } from './GroupRequest';
import {
    GroupRequestFromJSON,
    GroupRequestFromJSONTyped,
    GroupRequestToJSON,
    GroupRequestToJSONTyped,
} from './GroupRequest';
import type { CustomFieldValueRequest } from './CustomFieldValueRequest';
import {
    CustomFieldValueRequestFromJSON,
    CustomFieldValueRequestFromJSONTyped,
    CustomFieldValueRequestToJSON,
    CustomFieldValueRequestToJSONTyped,
} from './CustomFieldValueRequest';
import type { PositionEntity } from './PositionEntity';
import {
    PositionEntityFromJSON,
    PositionEntityFromJSONTyped,
    PositionEntityToJSON,
    PositionEntityToJSONTyped,
} from './PositionEntity';
import type { TimePoint } from './TimePoint';
import {
    TimePointFromJSON,
    TimePointFromJSONTyped,
    TimePointToJSON,
    TimePointToJSONTyped,
} from './TimePoint';
import type { PhoneRequest } from './PhoneRequest';
import {
    PhoneRequestFromJSON,
    PhoneRequestFromJSONTyped,
    PhoneRequestToJSON,
    PhoneRequestToJSONTyped,
} from './PhoneRequest';

/**
 * 
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    sourceObjectId?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    sourceDataVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    midname?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    lastname?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    gender?: UserRequestGenderEnum;
    /**
     * 
     * @type {boolean}
     * @memberof UserRequest
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {TimePoint}
     * @memberof UserRequest
     */
    birthDate?: TimePoint;
    /**
     * 
     * @type {Array<GroupRequest>}
     * @memberof UserRequest
     */
    groups?: Array<GroupRequest>;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    role?: UserRequestRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    login?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    email?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserRequest
     */
    secondaryEmails?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    status?: UserRequestStatusEnum;
    /**
     * 
     * @type {Array<PhoneRequest>}
     * @memberof UserRequest
     */
    phones?: Array<PhoneRequest>;
    /**
     * 
     * @type {Array<CustomFieldValueRequest>}
     * @memberof UserRequest
     */
    customFieldData?: Array<CustomFieldValueRequest>;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    languageCode?: UserRequestLanguageCodeEnum;
    /**
     * 
     * @type {PositionEntity}
     * @memberof UserRequest
     */
    position?: PositionEntity;
}


/**
 * @export
 */
export const UserRequestGenderEnum = {
    NotDefined: 'NotDefined',
    Female: 'Female',
    Male: 'Male'
} as const;
export type UserRequestGenderEnum = typeof UserRequestGenderEnum[keyof typeof UserRequestGenderEnum];

/**
 * @export
 */
export const UserRequestRoleEnum = {
    NotDefined: 'NotDefined',
    Admin: 'Admin',
    User: 'User',
    TechAdmin: 'TechAdmin',
    UserWithoutAccess: 'UserWithoutAccess',
    Robot: 'Robot'
} as const;
export type UserRequestRoleEnum = typeof UserRequestRoleEnum[keyof typeof UserRequestRoleEnum];

/**
 * @export
 */
export const UserRequestStatusEnum = {
    Active: 'Active',
    ActiveWithoutAccess: 'ActiveWithoutAccess',
    Inactive: 'Inactive'
} as const;
export type UserRequestStatusEnum = typeof UserRequestStatusEnum[keyof typeof UserRequestStatusEnum];

/**
 * @export
 */
export const UserRequestLanguageCodeEnum = {
    En: 'En',
    Ru: 'Ru',
    Pl: 'Pl',
    Ka: 'Ka',
    Ro: 'Ro',
    Pt: 'Pt',
    Es: 'Es',
    De: 'De',
    Az: 'Az',
    Tr: 'Tr'
} as const;
export type UserRequestLanguageCodeEnum = typeof UserRequestLanguageCodeEnum[keyof typeof UserRequestLanguageCodeEnum];


/**
 * Check if a given object implements the UserRequest interface.
 */
export function instanceOfUserRequest(value: object): value is UserRequest {
    return true;
}

export function UserRequestFromJSON(json: any): UserRequest {
    return UserRequestFromJSONTyped(json, false);
}

export function UserRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'sourceObjectId': json['sourceObjectId'] == null ? undefined : json['sourceObjectId'],
        'sourceDataVersion': json['sourceDataVersion'] == null ? undefined : json['sourceDataVersion'],
        'name': json['name'] == null ? undefined : json['name'],
        'midname': json['midname'] == null ? undefined : json['midname'],
        'lastname': json['lastname'] == null ? undefined : json['lastname'],
        'gender': json['gender'] == null ? undefined : json['gender'],
        'isDeleted': json['isDeleted'] == null ? undefined : json['isDeleted'],
        'birthDate': json['birthDate'] == null ? undefined : TimePointFromJSON(json['birthDate']),
        'groups': json['groups'] == null ? undefined : ((json['groups'] as Array<any>).map(GroupRequestFromJSON)),
        'role': json['role'] == null ? undefined : json['role'],
        'login': json['login'] == null ? undefined : json['login'],
        'password': json['password'] == null ? undefined : json['password'],
        'email': json['email'] == null ? undefined : json['email'],
        'secondaryEmails': json['secondaryEmails'] == null ? undefined : json['secondaryEmails'],
        'status': json['status'] == null ? undefined : json['status'],
        'phones': json['phones'] == null ? undefined : ((json['phones'] as Array<any>).map(PhoneRequestFromJSON)),
        'customFieldData': json['customFieldData'] == null ? undefined : ((json['customFieldData'] as Array<any>).map(CustomFieldValueRequestFromJSON)),
        'languageCode': json['languageCode'] == null ? undefined : json['languageCode'],
        'position': json['position'] == null ? undefined : PositionEntityFromJSON(json['position']),
    };
}

export function UserRequestToJSON(json: any): UserRequest {
    return UserRequestToJSONTyped(json, false);
}

export function UserRequestToJSONTyped(value?: UserRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sourceObjectId': value['sourceObjectId'],
        'sourceDataVersion': value['sourceDataVersion'],
        'name': value['name'],
        'midname': value['midname'],
        'lastname': value['lastname'],
        'gender': value['gender'],
        'isDeleted': value['isDeleted'],
        'birthDate': TimePointToJSON(value['birthDate']),
        'groups': value['groups'] == null ? undefined : ((value['groups'] as Array<any>).map(GroupRequestToJSON)),
        'role': value['role'],
        'login': value['login'],
        'password': value['password'],
        'email': value['email'],
        'secondaryEmails': value['secondaryEmails'],
        'status': value['status'],
        'phones': value['phones'] == null ? undefined : ((value['phones'] as Array<any>).map(PhoneRequestToJSON)),
        'customFieldData': value['customFieldData'] == null ? undefined : ((value['customFieldData'] as Array<any>).map(CustomFieldValueRequestToJSON)),
        'languageCode': value['languageCode'],
        'position': PositionEntityToJSON(value['position']),
    };
}

