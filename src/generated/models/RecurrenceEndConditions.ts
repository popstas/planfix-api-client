/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RecurrenceEndConditionsNotify } from './RecurrenceEndConditionsNotify';
import {
    RecurrenceEndConditionsNotifyFromJSON,
    RecurrenceEndConditionsNotifyFromJSONTyped,
    RecurrenceEndConditionsNotifyToJSON,
    RecurrenceEndConditionsNotifyToJSONTyped,
} from './RecurrenceEndConditionsNotify';
import type { TimePoint } from './TimePoint';
import {
    TimePointFromJSON,
    TimePointFromJSONTyped,
    TimePointToJSON,
    TimePointToJSONTyped,
} from './TimePoint';

/**
 * 
 * @export
 * @interface RecurrenceEndConditions
 */
export interface RecurrenceEndConditions {
    /**
     * 
     * @type {string}
     * @memberof RecurrenceEndConditions
     */
    type?: RecurrenceEndConditionsTypeEnum;
    /**
     * 
     * @type {TimePoint}
     * @memberof RecurrenceEndConditions
     */
    date?: TimePoint;
    /**
     * 
     * @type {number}
     * @memberof RecurrenceEndConditions
     */
    repeatCount?: number;
    /**
     * 
     * @type {RecurrenceEndConditionsNotify}
     * @memberof RecurrenceEndConditions
     */
    notify?: RecurrenceEndConditionsNotify;
}


/**
 * @export
 */
export const RecurrenceEndConditionsTypeEnum = {
    NoEnd: 'NoEnd',
    ByCount: 'ByCount',
    ByEndDate: 'ByEndDate'
} as const;
export type RecurrenceEndConditionsTypeEnum = typeof RecurrenceEndConditionsTypeEnum[keyof typeof RecurrenceEndConditionsTypeEnum];


/**
 * Check if a given object implements the RecurrenceEndConditions interface.
 */
export function instanceOfRecurrenceEndConditions(value: object): value is RecurrenceEndConditions {
    return true;
}

export function RecurrenceEndConditionsFromJSON(json: any): RecurrenceEndConditions {
    return RecurrenceEndConditionsFromJSONTyped(json, false);
}

export function RecurrenceEndConditionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecurrenceEndConditions {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'date': json['date'] == null ? undefined : TimePointFromJSON(json['date']),
        'repeatCount': json['repeatCount'] == null ? undefined : json['repeatCount'],
        'notify': json['notify'] == null ? undefined : RecurrenceEndConditionsNotifyFromJSON(json['notify']),
    };
}

export function RecurrenceEndConditionsToJSON(json: any): RecurrenceEndConditions {
    return RecurrenceEndConditionsToJSONTyped(json, false);
}

export function RecurrenceEndConditionsToJSONTyped(value?: RecurrenceEndConditions | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'date': TimePointToJSON(value['date']),
        'repeatCount': value['repeatCount'],
        'notify': RecurrenceEndConditionsNotifyToJSON(value['notify']),
    };
}

