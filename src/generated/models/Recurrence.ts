/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RecurrenceWeekly } from './RecurrenceWeekly';
import {
    RecurrenceWeeklyFromJSON,
    RecurrenceWeeklyFromJSONTyped,
    RecurrenceWeeklyToJSON,
    RecurrenceWeeklyToJSONTyped,
} from './RecurrenceWeekly';
import type { TimePoint } from './TimePoint';
import {
    TimePointFromJSON,
    TimePointFromJSONTyped,
    TimePointToJSON,
    TimePointToJSONTyped,
} from './TimePoint';
import type { RecurrenceDaily } from './RecurrenceDaily';
import {
    RecurrenceDailyFromJSON,
    RecurrenceDailyFromJSONTyped,
    RecurrenceDailyToJSON,
    RecurrenceDailyToJSONTyped,
} from './RecurrenceDaily';
import type { RecurrenceEndConditions } from './RecurrenceEndConditions';
import {
    RecurrenceEndConditionsFromJSON,
    RecurrenceEndConditionsFromJSONTyped,
    RecurrenceEndConditionsToJSON,
    RecurrenceEndConditionsToJSONTyped,
} from './RecurrenceEndConditions';
import type { RecurrenceMonthly } from './RecurrenceMonthly';
import {
    RecurrenceMonthlyFromJSON,
    RecurrenceMonthlyFromJSONTyped,
    RecurrenceMonthlyToJSON,
    RecurrenceMonthlyToJSONTyped,
} from './RecurrenceMonthly';

/**
 * 
 * @export
 * @interface Recurrence
 */
export interface Recurrence {
    /**
     * 
     * @type {TimePoint}
     * @memberof Recurrence
     */
    startDate?: TimePoint;
    /**
     * 
     * @type {RecurrenceEndConditions}
     * @memberof Recurrence
     */
    endConditions?: RecurrenceEndConditions;
    /**
     * 
     * @type {RecurrenceDaily}
     * @memberof Recurrence
     */
    daily?: RecurrenceDaily;
    /**
     * 
     * @type {RecurrenceWeekly}
     * @memberof Recurrence
     */
    weekly?: RecurrenceWeekly;
    /**
     * 
     * @type {RecurrenceMonthly}
     * @memberof Recurrence
     */
    monthly?: RecurrenceMonthly;
}

/**
 * Check if a given object implements the Recurrence interface.
 */
export function instanceOfRecurrence(value: object): value is Recurrence {
    return true;
}

export function RecurrenceFromJSON(json: any): Recurrence {
    return RecurrenceFromJSONTyped(json, false);
}

export function RecurrenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Recurrence {
    if (json == null) {
        return json;
    }
    return {
        
        'startDate': json['startDate'] == null ? undefined : TimePointFromJSON(json['startDate']),
        'endConditions': json['endConditions'] == null ? undefined : RecurrenceEndConditionsFromJSON(json['endConditions']),
        'daily': json['daily'] == null ? undefined : RecurrenceDailyFromJSON(json['daily']),
        'weekly': json['weekly'] == null ? undefined : RecurrenceWeeklyFromJSON(json['weekly']),
        'monthly': json['monthly'] == null ? undefined : RecurrenceMonthlyFromJSON(json['monthly']),
    };
}

export function RecurrenceToJSON(json: any): Recurrence {
    return RecurrenceToJSONTyped(json, false);
}

export function RecurrenceToJSONTyped(value?: Recurrence | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'startDate': TimePointToJSON(value['startDate']),
        'endConditions': RecurrenceEndConditionsToJSON(value['endConditions']),
        'daily': RecurrenceDailyToJSON(value['daily']),
        'weekly': RecurrenceWeeklyToJSON(value['weekly']),
        'monthly': RecurrenceMonthlyToJSON(value['monthly']),
    };
}

