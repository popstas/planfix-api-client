/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Complex project filters, <a target="blank" href="https://planfix.com/ru/help/REST_API:_%D0%A1%D0%BB%D0%BE%D0%B6%D0%BD%D1%8B%D0%B5_%D1%84%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%BE%D0%B2"> more information</a>
 * @export
 * @interface ComplexProjectFilter
 */
export interface ComplexProjectFilter {
    /**
     * 
     * @type {number}
     * @memberof ComplexProjectFilter
     */
    type: ComplexProjectFilterTypeEnum | null;
    /**
     * 
     * @type {string}
     * @memberof ComplexProjectFilter
     */
    operator: ComplexProjectFilterOperatorEnum;
    /**
     * 
     * @type {}
     * @memberof ComplexProjectFilter
     */
    value:  | null;
    /**
     * 
     * @type {number}
     * @memberof ComplexProjectFilter
     */
    field?: number;
}


/**
 * @export
 */
export const ComplexProjectFilterTypeEnum = {
    NUMBER_5005: 5005,
    NUMBER_5006: 5006,
    NUMBER_5007: 5007,
    NUMBER_5008: 5008,
    NUMBER_5009: 5009,
    NUMBER_5010: 5010,
    NUMBER_5011: 5011,
    NUMBER_5012: 5012,
    NUMBER_5013: 5013,
    NUMBER_5014: 5014,
    NUMBER_5015: 5015,
    NUMBER_5101: 5101,
    NUMBER_5102: 5102,
    NUMBER_5103: 5103,
    NUMBER_5104: 5104,
    NUMBER_5105: 5105,
    NUMBER_5106: 5106,
    NUMBER_5107: 5107,
    NUMBER_5108: 5108,
    NUMBER_5109: 5109,
    NUMBER_5110: 5110,
    NUMBER_5111: 5111,
    NUMBER_5112: 5112,
    NUMBER_5113: 5113,
    NUMBER_5115: 5115,
    NUMBER_5116: 5116,
    NUMBER_5117: 5117,
    NUMBER_5118: 5118
} as const;
export type ComplexProjectFilterTypeEnum = typeof ComplexProjectFilterTypeEnum[keyof typeof ComplexProjectFilterTypeEnum];

/**
 * @export
 */
export const ComplexProjectFilterOperatorEnum = {
    Equal: 'equal',
    Notequal: 'notequal',
    Gt: 'gt',
    Lt: 'lt'
} as const;
export type ComplexProjectFilterOperatorEnum = typeof ComplexProjectFilterOperatorEnum[keyof typeof ComplexProjectFilterOperatorEnum];


/**
 * Check if a given object implements the ComplexProjectFilter interface.
 */
export function instanceOfComplexProjectFilter(value: object): value is ComplexProjectFilter {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('operator' in value) || value['operator'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    return true;
}

export function ComplexProjectFilterFromJSON(json: any): ComplexProjectFilter {
    return ComplexProjectFilterFromJSONTyped(json, false);
}

export function ComplexProjectFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComplexProjectFilter {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'operator': json['operator'],
        'value': FromJSON(json['value']),
        'field': json['field'] == null ? undefined : json['field'],
    };
}

export function ComplexProjectFilterToJSON(json: any): ComplexProjectFilter {
    return ComplexProjectFilterToJSONTyped(json, false);
}

export function ComplexProjectFilterToJSONTyped(value?: ComplexProjectFilter | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'operator': value['operator'],
        'value': ToJSON(value['value']),
        'field': value['field'],
    };
}

