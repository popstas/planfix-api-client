/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CustomField
 */
export interface CustomField {
    /**
     * 
     * @type {number}
     * @memberof CustomField
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomField
     */
    name?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CustomField
     */
    names?: { [key: string]: string; };
    /**
     * 
     * @type {number}
     * @memberof CustomField
     */
    type?: CustomFieldTypeEnum | null;
    /**
     * 
     * @type {number}
     * @memberof CustomField
     */
    objectType?: CustomFieldObjectTypeEnum | null;
    /**
     * 
     * @type {number}
     * @memberof CustomField
     */
    groupId?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomField
     */
    directoryId?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof CustomField
     */
    directoryFields?: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomField
     */
    enumValues?: Array<string>;
    /**
     * Only for main fields
     * @type {string}
     * @memberof CustomField
     */
    mainValue?: string;
}


/**
 * @export
 */
export const CustomFieldTypeEnum = {
} as const;
export type CustomFieldTypeEnum = typeof CustomFieldTypeEnum[keyof typeof CustomFieldTypeEnum];

/**
 * @export
 */
export const CustomFieldObjectTypeEnum = {
} as const;
export type CustomFieldObjectTypeEnum = typeof CustomFieldObjectTypeEnum[keyof typeof CustomFieldObjectTypeEnum];


/**
 * Check if a given object implements the CustomField interface.
 */
export function instanceOfCustomField(value: object): value is CustomField {
    return true;
}

export function CustomFieldFromJSON(json: any): CustomField {
    return CustomFieldFromJSONTyped(json, false);
}

export function CustomFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomField {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'names': json['names'] == null ? undefined : json['names'],
        'type': json['type'] == null ? undefined : json['type'],
        'objectType': json['objectType'] == null ? undefined : json['objectType'],
        'groupId': json['groupId'] == null ? undefined : json['groupId'],
        'directoryId': json['directoryId'] == null ? undefined : json['directoryId'],
        'directoryFields': json['directoryFields'] == null ? undefined : json['directoryFields'],
        'enumValues': json['enumValues'] == null ? undefined : json['enumValues'],
        'mainValue': json['mainValue'] == null ? undefined : json['mainValue'],
    };
}

export function CustomFieldToJSON(json: any): CustomField {
    return CustomFieldToJSONTyped(json, false);
}

export function CustomFieldToJSONTyped(value?: CustomField | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'names': value['names'],
        'type': value['type'],
        'objectType': value['objectType'],
        'groupId': value['groupId'],
        'directoryId': value['directoryId'],
        'directoryFields': value['directoryFields'],
        'enumValues': value['enumValues'],
        'mainValue': value['mainValue'],
    };
}

