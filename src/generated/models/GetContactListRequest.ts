/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ComplexContactFilter } from './ComplexContactFilter';
import {
    ComplexContactFilterFromJSON,
    ComplexContactFilterFromJSONTyped,
    ComplexContactFilterToJSON,
    ComplexContactFilterToJSONTyped,
} from './ComplexContactFilter';

/**
 * 
 * @export
 * @interface GetContactListRequest
 */
export interface GetContactListRequest {
    /**
     * Offset from beginning of list
     * @type {number}
     * @memberof GetContactListRequest
     */
    offset?: number;
    /**
     * Size of requested list
     * @type {number}
     * @memberof GetContactListRequest
     */
    pageSize?: number;
    /**
     * Id for contact filter, get list by method '/contact/filters'
     * @type {string}
     * @memberof GetContactListRequest
     */
    filterId?: string;
    /**
     * 
     * @type {Array<ComplexContactFilter>}
     * @memberof GetContactListRequest
     */
    filters?: Array<ComplexContactFilter>;
    /**
     * True for companies / false for contacts
     * @type {boolean}
     * @memberof GetContactListRequest
     */
    isCompany?: boolean;
    /**
     * Flag for retrieving only data modified since last sync with external application
     * @type {boolean}
     * @memberof GetContactListRequest
     */
    onlyChanged?: boolean;
    /**
     * Flag for retrieving id with a prefix
     * @type {boolean}
     * @memberof GetContactListRequest
     */
    prefixedId?: boolean;
    /**
     * Fields returned - custom field identifiers, system field names, comma-delimited. <br>*Possible for system fields:* id, template, name, midname, lastname, gender, description, address, site, email, additionalEmailAddresses, skype, telegramId, telegram, facebook, instagram, vk, position, group, isCompany, isDeleted, birthDate, createdDate, dateOfLastUpdate, supervisors, phones, companies, contacts, files, sourceObjectId, sourceDataVersion
     * @type {string}
     * @memberof GetContactListRequest
     */
    fields?: string;
    /**
     * Unique identifier of external application
     * @type {string}
     * @memberof GetContactListRequest
     */
    sourceId?: string;
}

/**
 * Check if a given object implements the GetContactListRequest interface.
 */
export function instanceOfGetContactListRequest(value: object): value is GetContactListRequest {
    return true;
}

export function GetContactListRequestFromJSON(json: any): GetContactListRequest {
    return GetContactListRequestFromJSONTyped(json, false);
}

export function GetContactListRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetContactListRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'offset': json['offset'] == null ? undefined : json['offset'],
        'pageSize': json['pageSize'] == null ? undefined : json['pageSize'],
        'filterId': json['filterId'] == null ? undefined : json['filterId'],
        'filters': json['filters'] == null ? undefined : ((json['filters'] as Array<any>).map(ComplexContactFilterFromJSON)),
        'isCompany': json['isCompany'] == null ? undefined : json['isCompany'],
        'onlyChanged': json['onlyChanged'] == null ? undefined : json['onlyChanged'],
        'prefixedId': json['prefixedId'] == null ? undefined : json['prefixedId'],
        'fields': json['fields'] == null ? undefined : json['fields'],
        'sourceId': json['sourceId'] == null ? undefined : json['sourceId'],
    };
}

export function GetContactListRequestToJSON(json: any): GetContactListRequest {
    return GetContactListRequestToJSONTyped(json, false);
}

export function GetContactListRequestToJSONTyped(value?: GetContactListRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'offset': value['offset'],
        'pageSize': value['pageSize'],
        'filterId': value['filterId'],
        'filters': value['filters'] == null ? undefined : ((value['filters'] as Array<any>).map(ComplexContactFilterToJSON)),
        'isCompany': value['isCompany'],
        'onlyChanged': value['onlyChanged'],
        'prefixedId': value['prefixedId'],
        'fields': value['fields'],
        'sourceId': value['sourceId'],
    };
}

