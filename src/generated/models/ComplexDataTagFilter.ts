/* tslint:disable */
/* eslint-disable */
/**
 * Planfix REST API
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * The version of the OpenAPI document: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Complex data tag filters, <a target="blank" href="https://planfix.com/ru/help/REST_API:_%D0%A1%D0%BB%D0%BE%D0%B6%D0%BD%D1%8B%D0%B5_%D1%84%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B_%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D1%82%D0%B8%D0%BA"> more information</a>
 * @export
 * @interface ComplexDataTagFilter
 */
export interface ComplexDataTagFilter {
    /**
     * 
     * @type {number}
     * @memberof ComplexDataTagFilter
     */
    type: ComplexDataTagFilterTypeEnum | null;
    /**
     * 
     * @type {number}
     * @memberof ComplexDataTagFilter
     */
    field: number;
    /**
     * 
     * @type {string}
     * @memberof ComplexDataTagFilter
     */
    operator: ComplexDataTagFilterOperatorEnum;
    /**
     * 
     * @type {}
     * @memberof ComplexDataTagFilter
     */
    value:  | null;
}


/**
 * @export
 */
export const ComplexDataTagFilterTypeEnum = {
} as const;
export type ComplexDataTagFilterTypeEnum = typeof ComplexDataTagFilterTypeEnum[keyof typeof ComplexDataTagFilterTypeEnum];

/**
 * @export
 */
export const ComplexDataTagFilterOperatorEnum = {
    Equal: 'equal',
    Notequal: 'notequal',
    Gt: 'gt',
    Lt: 'lt'
} as const;
export type ComplexDataTagFilterOperatorEnum = typeof ComplexDataTagFilterOperatorEnum[keyof typeof ComplexDataTagFilterOperatorEnum];


/**
 * Check if a given object implements the ComplexDataTagFilter interface.
 */
export function instanceOfComplexDataTagFilter(value: object): value is ComplexDataTagFilter {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('field' in value) || value['field'] === undefined) return false;
    if (!('operator' in value) || value['operator'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    return true;
}

export function ComplexDataTagFilterFromJSON(json: any): ComplexDataTagFilter {
    return ComplexDataTagFilterFromJSONTyped(json, false);
}

export function ComplexDataTagFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComplexDataTagFilter {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'field': json['field'],
        'operator': json['operator'],
        'value': FromJSON(json['value']),
    };
}

export function ComplexDataTagFilterToJSON(json: any): ComplexDataTagFilter {
    return ComplexDataTagFilterToJSONTyped(json, false);
}

export function ComplexDataTagFilterToJSONTyped(value?: ComplexDataTagFilter | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'field': value['field'],
        'operator': value['operator'],
        'value': ToJSON(value['value']),
    };
}

